using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using Xunit;
using CSXCAD;
using Postprocess;
using System.Numerics;
using System.Diagnostics;
using System.Xml;
using System.Xml.Linq;
using System.Globalization;

namespace CyPhy2RFTest
{
    public class PostprocessTests
    {
        const double eps = 1e-15;

        [Fact]
        public void DipoleSar_LumpedPort_MatchesReference()
        {
            // Constants from Dipole_SAR.m
            double f0 = 1e9;
            double r = 50;
            double[] freqs = Utility.LinearSpace(500e6, 1500e6, 501);
            double meshRes = 2.5;

            var lumpedPort = new LumpedPort(0, 1, r,
                new Vector3D(-0.1, -0.1, -meshRes / 2),
                new Vector3D(+0.1, +0.1, meshRes / 2),
                ENormDir.Z, true);
            lumpedPort.ReadResults(freqs);

            ReferencePort rp = new ReferencePort();

            // S11 over f
            Assert.Equal(rp.S11_real, (from S11 in lumpedPort.S11
                                       select String.Format("{0:e4}", S11.Real)).ToArray());
            Assert.Equal(rp.S11_imag, (from S11 in lumpedPort.S11
                                       select String.Format("{0:e4}", S11.Imaginary)).ToArray());

            // Zin over f
            Assert.Equal(rp.Zin_real, (from Zin in lumpedPort.ZFdIn
                                       select String.Format("{0:e4}", Zin.Real)).ToArray());
            Assert.Equal(rp.Zin_imag, (from Zin in lumpedPort.ZFdIn
                                       select String.Format("{0:e4}", Zin.Imaginary)).ToArray());

            // Pin over f
            Assert.Equal(rp.Pin, (from Pin in lumpedPort.PFdIn
                                 select String.Format("{0:e4}", Pin)).ToArray());

            // Pin_f0
            double Pin_f0 = lumpedPort.GetPFdInAt(f0);
            Assert.Equal(String.Format("{0:e4}", rp.Pin_f0), String.Format("{0:e4}", Pin_f0));

        }

        /// <summary>
        /// Reference output values from the Octave executed Dipole_SAR.m simulation
        /// </summary>
        class ReferencePort
        {
            public double Pin_f0 = 1.4205e-27;

            public string[] Pin = new string[] 
            {
                "6.3026e-029", "6.3648e-029", "6.4282e-029", "6.4930e-029", "6.5598e-029", "6.6289e-029", "6.7007e-029", "6.7756e-029", 
                "6.8540e-029", "6.9361e-029", "7.0223e-029", "7.1130e-029", "7.2082e-029", "7.3083e-029", "7.4134e-029", "7.5236e-029", 
                "7.6390e-029", "7.7597e-029", "7.8857e-029", "8.0169e-029", "8.1532e-029", "8.2945e-029", "8.4406e-029", "8.5913e-029", 
                "8.7465e-029", "8.9057e-029", "9.0687e-029", "9.2352e-029", "9.4048e-029", "9.5772e-029", "9.7520e-029", "9.9288e-029", 
                "1.0107e-028", "1.0287e-028", "1.0468e-028", "1.0649e-028", "1.0831e-028", "1.1012e-028", "1.1194e-028", "1.1374e-028", 
                "1.1554e-028", "1.1733e-028", "1.1911e-028", "1.2088e-028", "1.2263e-028", "1.2438e-028", "1.2611e-028", "1.2783e-028", 
                "1.2954e-028", "1.3124e-028", "1.3294e-028", "1.3463e-028", "1.3632e-028", "1.3802e-028", "1.3971e-028", "1.4142e-028", 
                "1.4313e-028", "1.4487e-028", "1.4662e-028", "1.4839e-028", "1.5019e-028", "1.5203e-028", "1.5389e-028", "1.5580e-028", 
                "1.5774e-028", "1.5973e-028", "1.6177e-028", "1.6386e-028", "1.6600e-028", "1.6819e-028", "1.7044e-028", "1.7275e-028", 
                "1.7512e-028", "1.7754e-028", "1.8002e-028", "1.8257e-028", "1.8517e-028", "1.8782e-028", "1.9054e-028", "1.9330e-028", 
                "1.9612e-028", "1.9900e-028", "2.0192e-028", "2.0488e-028", "2.0789e-028", "2.1094e-028", "2.1403e-028", "2.1716e-028", 
                "2.2032e-028", "2.2351e-028", "2.2674e-028", "2.2998e-028", "2.3326e-028", "2.3656e-028", "2.3988e-028", "2.4322e-028", 
                "2.4659e-028", "2.4998e-028", "2.5338e-028", "2.5681e-028", "2.6026e-028", "2.6373e-028", "2.6723e-028", "2.7076e-028", 
                "2.7431e-028", "2.7790e-028", "2.8151e-028", "2.8517e-028", "2.8887e-028", "2.9261e-028", "2.9639e-028", "3.0023e-028", 
                "3.0412e-028", "3.0808e-028", "3.1209e-028", "3.1617e-028", "3.2032e-028", "3.2455e-028", "3.2885e-028", "3.3323e-028", 
                "3.3769e-028", "3.4224e-028", "3.4688e-028", "3.5161e-028", "3.5643e-028", "3.6135e-028", "3.6636e-028", "3.7147e-028", 
                "3.7667e-028", "3.8197e-028", "3.8736e-028", "3.9285e-028", "3.9844e-028", "4.0411e-028", "4.0988e-028", "4.1574e-028", 
                "4.2168e-028", "4.2771e-028", "4.3383e-028", "4.4002e-028", "4.4629e-028", "4.5264e-028", "4.5906e-028", "4.6555e-028", 
                "4.7210e-028", "4.7873e-028", "4.8541e-028", "4.9216e-028", "4.9897e-028", "5.0583e-028", "5.1275e-028", "5.1973e-028", 
                "5.2676e-028", "5.3385e-028", "5.4099e-028", "5.4818e-028", "5.5544e-028", "5.6274e-028", "5.7011e-028", "5.7753e-028", 
                "5.8502e-028", "5.9257e-028", "6.0018e-028", "6.0787e-028", "6.1562e-028", "6.2345e-028", "6.3136e-028", "6.3935e-028", 
                "6.4743e-028", "6.5560e-028", "6.6385e-028", "6.7221e-028", "6.8066e-028", "6.8922e-028", "6.9789e-028", "7.0666e-028", 
                "7.1555e-028", "7.2456e-028", "7.3368e-028", "7.4292e-028", "7.5229e-028", "7.6178e-028", "7.7140e-028", "7.8115e-028", 
                "7.9103e-028", "8.0103e-028", "8.1116e-028", "8.2142e-028", "8.3181e-028", "8.4233e-028", "8.5296e-028", "8.6373e-028", 
                "8.7461e-028", "8.8560e-028", "8.9672e-028", "9.0794e-028", "9.1926e-028", "9.3069e-028", "9.4222e-028", "9.5383e-028", 
                "9.6554e-028", "9.7732e-028", "9.8917e-028", "1.0011e-027", "1.0131e-027", "1.0251e-027", "1.0372e-027", "1.0493e-027", 
                "1.0614e-027", "1.0736e-027", "1.0857e-027", "1.0979e-027", "1.1100e-027", "1.1221e-027", "1.1342e-027", "1.1463e-027", 
                "1.1582e-027", "1.1701e-027", "1.1820e-027", "1.1937e-027", "1.2053e-027", "1.2168e-027", "1.2281e-027", "1.2393e-027", 
                "1.2503e-027", "1.2611e-027", "1.2717e-027", "1.2821e-027", "1.2923e-027", "1.3022e-027", "1.3118e-027", "1.3211e-027", 
                "1.3302e-027", "1.3389e-027", "1.3472e-027", "1.3552e-027", "1.3628e-027", "1.3701e-027", "1.3769e-027", "1.3832e-027", 
                "1.3892e-027", "1.3946e-027", "1.3996e-027", "1.4041e-027", "1.4081e-027", "1.4115e-027", "1.4144e-027", "1.4168e-027", 
                "1.4186e-027", "1.4198e-027", "1.4205e-027", "1.4206e-027", "1.4200e-027", "1.4189e-027", "1.4172e-027", "1.4148e-027", 
                "1.4119e-027", "1.4083e-027", "1.4041e-027", "1.3994e-027", "1.3940e-027", "1.3880e-027", "1.3814e-027", "1.3743e-027", 
                "1.3666e-027", "1.3583e-027", "1.3494e-027", "1.3400e-027", "1.3301e-027", "1.3197e-027", "1.3088e-027", "1.2974e-027", 
                "1.2856e-027", "1.2733e-027", "1.2606e-027", "1.2475e-027", "1.2340e-027", "1.2202e-027", "1.2061e-027", "1.1916e-027", 
                "1.1768e-027", "1.1618e-027", "1.1465e-027", "1.1311e-027", "1.1154e-027", "1.0995e-027", "1.0835e-027", "1.0674e-027", 
                "1.0512e-027", "1.0348e-027", "1.0184e-027", "1.0020e-027", "9.8554e-028", "9.6907e-028", "9.5261e-028", "9.3618e-028", 
                "9.1980e-028", "9.0348e-028", "8.8723e-028", "8.7108e-028", "8.5503e-028", "8.3910e-028", "8.2329e-028", "8.0763e-028", 
                "7.9212e-028", "7.7676e-028", "7.6158e-028", "7.4657e-028", "7.3174e-028", "7.1710e-028", "7.0266e-028", "6.8842e-028", 
                "6.7438e-028", "6.6055e-028", "6.4694e-028", "6.3354e-028", "6.2035e-028", "6.0739e-028", "5.9465e-028", "5.8212e-028", 
                "5.6982e-028", "5.5774e-028", "5.4588e-028", "5.3425e-028", "5.2283e-028", "5.1164e-028", "5.0066e-028", "4.8990e-028", 
                "4.7936e-028", "4.6903e-028", "4.5891e-028", "4.4900e-028", "4.3930e-028", "4.2980e-028", "4.2051e-028", "4.1141e-028", 
                "4.0251e-028", "3.9381e-028", "3.8530e-028", "3.7697e-028", "3.6884e-028", "3.6088e-028", "3.5310e-028", "3.4550e-028", 
                "3.3807e-028", "3.3081e-028", "3.2372e-028", "3.1678e-028", "3.1001e-028", "3.0339e-028", "2.9692e-028", "2.9060e-028", 
                "2.8443e-028", "2.7839e-028", "2.7250e-028", "2.6673e-028", "2.6110e-028", "2.5560e-028", "2.5021e-028", "2.4495e-028", 
                "2.3981e-028", "2.3478e-028", "2.2986e-028", "2.2505e-028", "2.2034e-028", "2.1574e-028", "2.1123e-028", "2.0683e-028", 
                "2.0251e-028", "1.9829e-028", "1.9416e-028", "1.9012e-028", "1.8616e-028", "1.8228e-028", "1.7849e-028", "1.7477e-028", 
                "1.7114e-028", "1.6758e-028", "1.6409e-028", "1.6068e-028", "1.5735e-028", "1.5408e-028", "1.5088e-028", "1.4776e-028", 
                "1.4470e-028", "1.4171e-028", "1.3878e-028", "1.3592e-028", "1.3313e-028", "1.3039e-028", "1.2772e-028", "1.2512e-028", 
                "1.2257e-028", "1.2008e-028", "1.1765e-028", "1.1528e-028", "1.1296e-028", "1.1070e-028", "1.0850e-028", "1.0635e-028", 
                "1.0425e-028", "1.0220e-028", "1.0021e-028", "9.8256e-029", "9.6355e-029", "9.4499e-029", "9.2688e-029", "9.0920e-029", 
                "8.9194e-029", "8.7509e-029", "8.5863e-029", "8.4255e-029", "8.2683e-029", "8.1146e-029", "7.9643e-029", "7.8173e-029", 
                "7.6733e-029", "7.5324e-029", "7.3943e-029", "7.2590e-029", "7.1263e-029", "6.9962e-029", "6.8686e-029", "6.7433e-029", 
                "6.6203e-029", "6.4995e-029", "6.3809e-029", "6.2643e-029", "6.1498e-029", "6.0372e-029", "5.9266e-029", "5.8179e-029", 
                "5.7110e-029", "5.6060e-029", "5.5028e-029", "5.4014e-029", "5.3017e-029", "5.2039e-029", "5.1079e-029", "5.0136e-029", 
                "4.9211e-029", "4.8303e-029", "4.7414e-029", "4.6542e-029", "4.5687e-029", "4.4851e-029", "4.4032e-029", "4.3230e-029", 
                "4.2446e-029", "4.1680e-029", "4.0930e-029", "4.0198e-029", "3.9482e-029", "3.8784e-029", "3.8101e-029", "3.7435e-029", 
                "3.6784e-029", "3.6149e-029", "3.5529e-029", "3.4923e-029", "3.4332e-029", "3.3754e-029", "3.3189e-029", "3.2636e-029", 
                "3.2096e-029", "3.1567e-029", "3.1050e-029", "3.0543e-029", "3.0045e-029", "2.9558e-029", "2.9079e-029", "2.8608e-029", 
                "2.8146e-029", "2.7691e-029", "2.7243e-029", "2.6802e-029", "2.6367e-029", "2.5938e-029", "2.5515e-029", "2.5097e-029", 
                "2.4684e-029", "2.4277e-029", "2.3874e-029", "2.3477e-029", "2.3084e-029", "2.2695e-029", "2.2312e-029", "2.1933e-029", 
                "2.1559e-029", "2.1190e-029", "2.0825e-029", "2.0466e-029", "2.0112e-029", "1.9763e-029", "1.9420e-029", "1.9082e-029", 
                "1.8750e-029", "1.8424e-029", "1.8104e-029", "1.7790e-029", "1.7482e-029"
            };

            public string[] Zin_real = new string[] 
            {
                "1.1044e+001", "1.1065e+001", "1.1087e+001", "1.1111e+001", "1.1136e+001", "1.1165e+001", "1.1197e+001", "1.1233e+001", 
                "1.1273e+001", "1.1318e+001", "1.1369e+001", "1.1425e+001", "1.1487e+001", "1.1555e+001", "1.1629e+001", "1.1710e+001", 
                "1.1797e+001", "1.1890e+001", "1.1989e+001", "1.2094e+001", "1.2205e+001", "1.2321e+001", "1.2443e+001", "1.2568e+001", 
                "1.2698e+001", "1.2832e+001", "1.2969e+001", "1.3108e+001", "1.3250e+001", "1.3393e+001", "1.3537e+001", "1.3682e+001", 
                "1.3826e+001", "1.3970e+001", "1.4113e+001", "1.4255e+001", "1.4394e+001", "1.4532e+001", "1.4666e+001", "1.4797e+001", 
                "1.4926e+001", "1.5050e+001", "1.5172e+001", "1.5289e+001", "1.5403e+001", "1.5513e+001", "1.5619e+001", "1.5722e+001", 
                "1.5821e+001", "1.5918e+001", "1.6011e+001", "1.6101e+001", "1.6189e+001", "1.6276e+001", "1.6360e+001", "1.6443e+001", 
                "1.6525e+001", "1.6607e+001", "1.6689e+001", "1.6771e+001", "1.6854e+001", "1.6938e+001", "1.7023e+001", "1.7111e+001", 
                "1.7200e+001", "1.7292e+001", "1.7386e+001", "1.7484e+001", "1.7584e+001", "1.7688e+001", "1.7795e+001", "1.7905e+001", 
                "1.8019e+001", "1.8136e+001", "1.8257e+001", "1.8381e+001", "1.8508e+001", "1.8638e+001", "1.8771e+001", "1.8906e+001", 
                "1.9044e+001", "1.9184e+001", "1.9326e+001", "1.9470e+001", "1.9615e+001", "1.9761e+001", "1.9907e+001", "2.0054e+001", 
                "2.0202e+001", "2.0349e+001", "2.0496e+001", "2.0643e+001", "2.0789e+001", "2.0934e+001", "2.1078e+001", "2.1220e+001", 
                "2.1362e+001", "2.1501e+001", "2.1640e+001", "2.1777e+001", "2.1913e+001", "2.2047e+001", "2.2180e+001", "2.2312e+001", 
                "2.2442e+001", "2.2572e+001", "2.2700e+001", "2.2829e+001", "2.2956e+001", "2.3084e+001", "2.3211e+001", "2.3339e+001", 
                "2.3467e+001", "2.3596e+001", "2.3726e+001", "2.3857e+001", "2.3989e+001", "2.4123e+001", "2.4258e+001", "2.4396e+001", 
                "2.4535e+001", "2.4677e+001", "2.4821e+001", "2.4967e+001", "2.5116e+001", "2.5267e+001", "2.5421e+001", "2.5578e+001", 
                "2.5737e+001", "2.5898e+001", "2.6062e+001", "2.6228e+001", "2.6397e+001", "2.6567e+001", "2.6739e+001", "2.6913e+001", 
                "2.7089e+001", "2.7266e+001", "2.7444e+001", "2.7623e+001", "2.7803e+001", "2.7983e+001", "2.8163e+001", "2.8344e+001", 
                "2.8525e+001", "2.8705e+001", "2.8885e+001", "2.9064e+001", "2.9242e+001", "2.9419e+001", "2.9595e+001", "2.9770e+001", 
                "2.9943e+001", "3.0115e+001", "3.0285e+001", "3.0454e+001", "3.0621e+001", "3.0786e+001", "3.0949e+001", "3.1111e+001", 
                "3.1271e+001", "3.1429e+001", "3.1586e+001", "3.1741e+001", "3.1895e+001", "3.2047e+001", "3.2198e+001", "3.2348e+001", 
                "3.2497e+001", "3.2646e+001", "3.2793e+001", "3.2940e+001", "3.3086e+001", "3.3233e+001", "3.3379e+001", "3.3524e+001", 
                "3.3670e+001", "3.3817e+001", "3.3963e+001", "3.4110e+001", "3.4258e+001", "3.4407e+001", "3.4556e+001", "3.4706e+001", 
                "3.4857e+001", "3.5009e+001", "3.5162e+001", "3.5316e+001", "3.5472e+001", "3.5628e+001", "3.5786e+001", "3.5945e+001", 
                "3.6105e+001", "3.6267e+001", "3.6430e+001", "3.6594e+001", "3.6759e+001", "3.6926e+001", "3.7093e+001", "3.7262e+001", 
                "3.7432e+001", "3.7603e+001", "3.7774e+001", "3.7947e+001", "3.8121e+001", "3.8296e+001", "3.8471e+001", "3.8647e+001", 
                "3.8824e+001", "3.9002e+001", "3.9180e+001", "3.9359e+001", "3.9539e+001", "3.9719e+001", "3.9900e+001", "4.0081e+001", 
                "4.0262e+001", "4.0444e+001", "4.0627e+001", "4.0809e+001", "4.0992e+001", "4.1176e+001", "4.1359e+001", "4.1543e+001", 
                "4.1727e+001", "4.1912e+001", "4.2097e+001", "4.2281e+001", "4.2466e+001", "4.2652e+001", "4.2837e+001", "4.3023e+001", 
                "4.3208e+001", "4.3394e+001", "4.3580e+001", "4.3766e+001", "4.3953e+001", "4.4139e+001", "4.4325e+001", "4.4512e+001", 
                "4.4698e+001", "4.4885e+001", "4.5071e+001", "4.5258e+001", "4.5445e+001", "4.5632e+001", "4.5818e+001", "4.6005e+001", 
                "4.6192e+001", "4.6379e+001", "4.6566e+001", "4.6753e+001", "4.6940e+001", "4.7127e+001", "4.7314e+001", "4.7501e+001", 
                "4.7688e+001", "4.7875e+001", "4.8063e+001", "4.8250e+001", "4.8438e+001", "4.8626e+001", "4.8814e+001", "4.9002e+001", 
                "4.9190e+001", "4.9379e+001", "4.9568e+001", "4.9758e+001", "4.9947e+001", "5.0138e+001", "5.0329e+001", "5.0520e+001", 
                "5.0712e+001", "5.0904e+001", "5.1097e+001", "5.1291e+001", "5.1486e+001", "5.1682e+001", "5.1878e+001", "5.2076e+001", 
                "5.2274e+001", "5.2474e+001", "5.2674e+001", "5.2876e+001", "5.3080e+001", "5.3284e+001", "5.3490e+001", "5.3697e+001", 
                "5.3906e+001", "5.4116e+001", "5.4328e+001", "5.4542e+001", "5.4757e+001", "5.4974e+001", "5.5193e+001", "5.5414e+001", 
                "5.5636e+001", "5.5861e+001", "5.6087e+001", "5.6315e+001", "5.6546e+001", "5.6778e+001", "5.7013e+001", "5.7249e+001", 
                "5.7488e+001", "5.7729e+001", "5.7972e+001", "5.8217e+001", "5.8464e+001", "5.8714e+001", "5.8966e+001", "5.9220e+001", 
                "5.9476e+001", "5.9735e+001", "5.9996e+001", "6.0260e+001", "6.0526e+001", "6.0795e+001", "6.1066e+001", "6.1340e+001", 
                "6.1616e+001", "6.1895e+001", "6.2177e+001", "6.2462e+001", "6.2750e+001", "6.3040e+001", "6.3334e+001", "6.3630e+001", 
                "6.3930e+001", "6.4233e+001", "6.4540e+001", "6.4849e+001", "6.5163e+001", "6.5479e+001", "6.5800e+001", "6.6124e+001", 
                "6.6451e+001", "6.6783e+001", "6.7118e+001", "6.7457e+001", "6.7800e+001", "6.8147e+001", "6.8497e+001", "6.8852e+001", 
                "6.9210e+001", "6.9572e+001", "6.9937e+001", "7.0306e+001", "7.0679e+001", "7.1056e+001", "7.1435e+001", "7.1818e+001", 
                "7.2204e+001", "7.2593e+001", "7.2985e+001", "7.3380e+001", "7.3777e+001", "7.4177e+001", "7.4579e+001", "7.4983e+001", 
                "7.5390e+001", "7.5798e+001", "7.6209e+001", "7.6621e+001", "7.7035e+001", "7.7451e+001", "7.7868e+001", "7.8287e+001", 
                "7.8708e+001", "7.9131e+001", "7.9556e+001", "7.9983e+001", "8.0412e+001", "8.0844e+001", "8.1279e+001", "8.1716e+001", 
                "8.2157e+001", "8.2602e+001", "8.3051e+001", "8.3504e+001", "8.3962e+001", "8.4426e+001", "8.4895e+001", "8.5371e+001", 
                "8.5854e+001", "8.6344e+001", "8.6842e+001", "8.7349e+001", "8.7865e+001", "8.8390e+001", "8.8926e+001", "8.9472e+001", 
                "9.0029e+001", "9.0597e+001", "9.1177e+001", "9.1769e+001", "9.2374e+001", "9.2991e+001", "9.3621e+001", "9.4265e+001", 
                "9.4921e+001", "9.5590e+001", "9.6272e+001", "9.6966e+001", "9.7674e+001", "9.8394e+001", "9.9125e+001", "9.9869e+001", 
                "1.0062e+002", "1.0139e+002", "1.0216e+002", "1.0295e+002", "1.0374e+002", "1.0455e+002", "1.0536e+002", "1.0617e+002", 
                "1.0700e+002", "1.0783e+002", "1.0866e+002", "1.0950e+002", "1.1035e+002", "1.1120e+002", "1.1205e+002", "1.1291e+002", 
                "1.1377e+002", "1.1463e+002", "1.1550e+002", "1.1637e+002", "1.1725e+002", "1.1813e+002", "1.1902e+002", "1.1991e+002", 
                "1.2081e+002", "1.2171e+002", "1.2263e+002", "1.2355e+002", "1.2448e+002", "1.2543e+002", "1.2639e+002", "1.2736e+002", 
                "1.2835e+002", "1.2936e+002", "1.3039e+002", "1.3143e+002", "1.3250e+002", "1.3359e+002", "1.3470e+002", "1.3584e+002", 
                "1.3700e+002", "1.3819e+002", "1.3941e+002", "1.4066e+002", "1.4194e+002", "1.4325e+002", "1.4459e+002", "1.4595e+002", 
                "1.4735e+002", "1.4878e+002", "1.5024e+002", "1.5173e+002", "1.5324e+002", "1.5478e+002", "1.5635e+002", "1.5795e+002", 
                "1.5956e+002", "1.6120e+002", "1.6286e+002", "1.6454e+002", "1.6623e+002", "1.6794e+002", "1.6967e+002", "1.7141e+002", 
                "1.7315e+002", "1.7491e+002", "1.7668e+002", "1.7845e+002", "1.8023e+002", "1.8202e+002", "1.8381e+002", "1.8561e+002", 
                "1.8742e+002", "1.8923e+002", "1.9106e+002", "1.9289e+002", "1.9473e+002", "1.9659e+002", "1.9846e+002", "2.0035e+002", 
                "2.0226e+002", "2.0419e+002", "2.0615e+002", "2.0814e+002", "2.1017e+002", "2.1223e+002", "2.1433e+002", "2.1649e+002", 
                "2.1869e+002", "2.2094e+002", "2.2325e+002", "2.2563e+002", "2.2807e+002"
            };
            public string[] Zin_imag = new string[] 
            {
                "-4.8801e+002", "-4.8506e+002", "-4.8212e+002", "-4.7920e+002", "-4.7629e+002", "-4.7339e+002", "-4.7050e+002", "-4.6763e+002", 
                "-4.6477e+002", "-4.6192e+002", "-4.5909e+002", "-4.5627e+002", "-4.5346e+002", "-4.5067e+002", "-4.4789e+002", "-4.4513e+002", 
                "-4.4238e+002", "-4.3965e+002", "-4.3694e+002", "-4.3424e+002", "-4.3156e+002", "-4.2890e+002", "-4.2626e+002", "-4.2363e+002", 
                "-4.2103e+002", "-4.1844e+002", "-4.1587e+002", "-4.1332e+002", "-4.1078e+002", "-4.0827e+002", "-4.0578e+002", "-4.0330e+002", 
                "-4.0084e+002", "-3.9840e+002", "-3.9598e+002", "-3.9357e+002", "-3.9118e+002", "-3.8881e+002", "-3.8645e+002", "-3.8411e+002", 
                "-3.8178e+002", "-3.7946e+002", "-3.7716e+002", "-3.7487e+002", "-3.7260e+002", "-3.7033e+002", "-3.6808e+002", "-3.6584e+002", 
                "-3.6360e+002", "-3.6138e+002", "-3.5917e+002", "-3.5696e+002", "-3.5476e+002", "-3.5257e+002", "-3.5039e+002", "-3.4821e+002", 
                "-3.4604e+002", "-3.4388e+002", "-3.4172e+002", "-3.3957e+002", "-3.3742e+002", "-3.3528e+002", "-3.3315e+002", "-3.3102e+002", 
                "-3.2890e+002", "-3.2679e+002", "-3.2468e+002", "-3.2259e+002", "-3.2049e+002", "-3.1841e+002", "-3.1633e+002", "-3.1426e+002", 
                "-3.1220e+002", "-3.1015e+002", "-3.0810e+002", "-3.0607e+002", "-3.0404e+002", "-3.0202e+002", "-3.0001e+002", "-2.9801e+002", 
                "-2.9602e+002", "-2.9405e+002", "-2.9208e+002", "-2.9012e+002", "-2.8817e+002", "-2.8623e+002", "-2.8430e+002", "-2.8238e+002", 
                "-2.8046e+002", "-2.7856e+002", "-2.7667e+002", "-2.7479e+002", "-2.7291e+002", "-2.7104e+002", "-2.6919e+002", "-2.6734e+002", 
                "-2.6549e+002", "-2.6366e+002", "-2.6183e+002", "-2.6001e+002", "-2.5819e+002", "-2.5638e+002", "-2.5458e+002", "-2.5278e+002", 
                "-2.5098e+002", "-2.4920e+002", "-2.4741e+002", "-2.4563e+002", "-2.4386e+002", "-2.4209e+002", "-2.4032e+002", "-2.3856e+002", 
                "-2.3680e+002", "-2.3504e+002", "-2.3329e+002", "-2.3154e+002", "-2.2980e+002", "-2.2806e+002", "-2.2632e+002", "-2.2459e+002", 
                "-2.2286e+002", "-2.2113e+002", "-2.1941e+002", "-2.1770e+002", "-2.1599e+002", "-2.1428e+002", "-2.1258e+002", "-2.1088e+002", 
                "-2.0919e+002", "-2.0750e+002", "-2.0582e+002", "-2.0415e+002", "-2.0248e+002", "-2.0082e+002", "-1.9916e+002", "-1.9751e+002", 
                "-1.9587e+002", "-1.9423e+002", "-1.9260e+002", "-1.9098e+002", "-1.8936e+002", "-1.8775e+002", "-1.8614e+002", "-1.8454e+002", 
                "-1.8295e+002", "-1.8136e+002", "-1.7978e+002", "-1.7821e+002", "-1.7664e+002", "-1.7507e+002", "-1.7351e+002", "-1.7196e+002", 
                "-1.7041e+002", "-1.6887e+002", "-1.6733e+002", "-1.6579e+002", "-1.6426e+002", "-1.6274e+002", "-1.6121e+002", "-1.5969e+002", 
                "-1.5818e+002", "-1.5666e+002", "-1.5515e+002", "-1.5364e+002", "-1.5213e+002", "-1.5063e+002", "-1.4913e+002", "-1.4763e+002", 
                "-1.4613e+002", "-1.4463e+002", "-1.4313e+002", "-1.4164e+002", "-1.4014e+002", "-1.3865e+002", "-1.3716e+002", "-1.3567e+002", 
                "-1.3418e+002", "-1.3269e+002", "-1.3120e+002", "-1.2972e+002", "-1.2823e+002", "-1.2675e+002", "-1.2526e+002", "-1.2378e+002", 
                "-1.2230e+002", "-1.2082e+002", "-1.1934e+002", "-1.1786e+002", "-1.1639e+002", "-1.1491e+002", "-1.1344e+002", "-1.1197e+002", 
                "-1.1050e+002", "-1.0903e+002", "-1.0756e+002", "-1.0609e+002", "-1.0463e+002", "-1.0317e+002", "-1.0171e+002", "-1.0025e+002", 
                "-9.8791e+001", "-9.7335e+001", "-9.5881e+001", "-9.4429e+001", "-9.2979e+001", "-9.1531e+001", "-9.0084e+001", "-8.8639e+001", 
                "-8.7196e+001", "-8.5754e+001", "-8.4314e+001", "-8.2876e+001", "-8.1439e+001", "-8.0004e+001", "-7.8570e+001", "-7.7138e+001", 
                "-7.5707e+001", "-7.4277e+001", "-7.2849e+001", "-7.1422e+001", "-6.9996e+001", "-6.8571e+001", "-6.7147e+001", "-6.5725e+001", 
                "-6.4303e+001", "-6.2882e+001", "-6.1463e+001", "-6.0044e+001", "-5.8625e+001", "-5.7208e+001", "-5.5791e+001", "-5.4375e+001", 
                "-5.2959e+001", "-5.1544e+001", "-5.0129e+001", "-4.8715e+001", "-4.7301e+001", "-4.5888e+001", "-4.4474e+001", "-4.3061e+001", 
                "-4.1647e+001", "-4.0234e+001", "-3.8821e+001", "-3.7408e+001", "-3.5994e+001", "-3.4581e+001", "-3.3167e+001", "-3.1752e+001", 
                "-3.0337e+001", "-2.8922e+001", "-2.7506e+001", "-2.6090e+001", "-2.4673e+001", "-2.3255e+001", "-2.1836e+001", "-2.0416e+001", 
                "-1.8995e+001", "-1.7573e+001", "-1.6150e+001", "-1.4726e+001", "-1.3300e+001", "-1.1873e+001", "-1.0445e+001", "-9.0144e+000", 
                "-7.5827e+000", "-6.1491e+000", "-4.7138e+000", "-3.2767e+000", "-1.8375e+000", "-3.9640e-001", "1.0468e+000", "2.4922e+000", 
                "3.9399e+000", "5.3898e+000", "6.8421e+000", "8.2968e+000", "9.7539e+000", "1.1214e+001", "1.2676e+001", "1.4141e+001", 
                "1.5609e+001", "1.7079e+001", "1.8552e+001", "2.0028e+001", "2.1507e+001", "2.2989e+001", "2.4474e+001", "2.5961e+001", 
                "2.7452e+001", "2.8946e+001", "3.0443e+001", "3.1942e+001", "3.3445e+001", "3.4952e+001", "3.6461e+001", "3.7973e+001", 
                "3.9489e+001", "4.1008e+001", "4.2530e+001", "4.4055e+001", "4.5584e+001", "4.7116e+001", "4.8651e+001", "5.0190e+001", 
                "5.1732e+001", "5.3278e+001", "5.4827e+001", "5.6379e+001", "5.7935e+001", "5.9495e+001", "6.1058e+001", "6.2625e+001", 
                "6.4195e+001", "6.5770e+001", "6.7348e+001", "6.8930e+001", "7.0516e+001", "7.2105e+001", "7.3699e+001", "7.5297e+001", 
                "7.6900e+001", "7.8506e+001", "8.0116e+001", "8.1731e+001", "8.3351e+001", "8.4974e+001", "8.6602e+001", "8.8234e+001", 
                "8.9871e+001", "9.1513e+001", "9.3159e+001", "9.4809e+001", "9.6464e+001", "9.8123e+001", "9.9787e+001", "1.0146e+002", 
                "1.0313e+002", "1.0481e+002", "1.0649e+002", "1.0817e+002", "1.0986e+002", "1.1156e+002", "1.1326e+002", "1.1496e+002", 
                "1.1667e+002", "1.1838e+002", "1.2009e+002", "1.2181e+002", "1.2354e+002", "1.2527e+002", "1.2700e+002", "1.2873e+002", 
                "1.3048e+002", "1.3222e+002", "1.3397e+002", "1.3572e+002", "1.3748e+002", "1.3924e+002", "1.4101e+002", "1.4278e+002", 
                "1.4456e+002", "1.4634e+002", "1.4813e+002", "1.4993e+002", "1.5173e+002", "1.5354e+002", "1.5535e+002", "1.5718e+002", 
                "1.5901e+002", "1.6085e+002", "1.6269e+002", "1.6455e+002", "1.6641e+002", "1.6829e+002", "1.7017e+002", "1.7207e+002", 
                "1.7397e+002", "1.7589e+002", "1.7782e+002", "1.7976e+002", "1.8171e+002", "1.8368e+002", "1.8565e+002", "1.8764e+002", 
                "1.8964e+002", "1.9165e+002", "1.9368e+002", "1.9572e+002", "1.9777e+002", "1.9983e+002", "2.0191e+002", "2.0399e+002", 
                "2.0609e+002", "2.0820e+002", "2.1032e+002", "2.1245e+002", "2.1460e+002", "2.1675e+002", "2.1891e+002", "2.2108e+002", 
                "2.2325e+002", "2.2544e+002", "2.2763e+002", "2.2983e+002", "2.3203e+002", "2.3424e+002", "2.3646e+002", "2.3868e+002", 
                "2.4090e+002", "2.4313e+002", "2.4537e+002", "2.4760e+002", "2.4985e+002", "2.5210e+002", "2.5435e+002", "2.5660e+002", 
                "2.5887e+002", "2.6113e+002", "2.6341e+002", "2.6569e+002", "2.6798e+002", "2.7027e+002", "2.7258e+002", "2.7489e+002", 
                "2.7722e+002", "2.7956e+002", "2.8191e+002", "2.8428e+002", "2.8666e+002", "2.8905e+002", "2.9147e+002", "2.9390e+002", 
                "2.9635e+002", "2.9882e+002", "3.0131e+002", "3.0382e+002", "3.0636e+002", "3.0891e+002", "3.1149e+002", "3.1410e+002", 
                "3.1673e+002", "3.1938e+002", "3.2205e+002", "3.2475e+002", "3.2747e+002", "3.3021e+002", "3.3298e+002", "3.3576e+002", 
                "3.3857e+002", "3.4139e+002", "3.4423e+002", "3.4709e+002", "3.4997e+002", "3.5286e+002", "3.5576e+002", "3.5867e+002", 
                "3.6160e+002", "3.6453e+002", "3.6747e+002", "3.7041e+002", "3.7337e+002", "3.7632e+002", "3.7928e+002", "3.8224e+002", 
                "3.8520e+002", "3.8816e+002", "3.9113e+002", "3.9410e+002", "3.9707e+002", "4.0004e+002", "4.0301e+002", "4.0599e+002", 
                "4.0897e+002", "4.1196e+002", "4.1497e+002", "4.1798e+002", "4.2100e+002", "4.2404e+002", "4.2710e+002", "4.3018e+002", 
                "4.3328e+002", "4.3641e+002", "4.3957e+002", "4.4276e+002", "4.4598e+002", "4.4924e+002", "4.5254e+002", "4.5588e+002", 
                "4.5927e+002", "4.6270e+002", "4.6617e+002", "4.6970e+002", "4.7327e+002", "4.7689e+002", "4.8056e+002", "4.8429e+002", 
                "4.8806e+002", "4.9188e+002", "4.9575e+002", "4.9966e+002", "5.0362e+002"
            };
            public string[] S11_real = new string[] 
            {
                "9.7476e-001", "9.7445e-001", "9.7413e-001", "9.7381e-001", "9.7349e-001", "9.7315e-001", "9.7282e-001", "9.7247e-001", 
                "9.7212e-001", "9.7176e-001", "9.7139e-001", "9.7102e-001", "9.7064e-001", "9.7025e-001", "9.6985e-001", "9.6944e-001", 
                "9.6903e-001", "9.6860e-001", "9.6817e-001", "9.6773e-001", "9.6728e-001", "9.6682e-001", "9.6636e-001", "9.6588e-001", 
                "9.6540e-001", "9.6491e-001", "9.6441e-001", "9.6390e-001", "9.6339e-001", "9.6286e-001", "9.6234e-001", "9.6180e-001", 
                "9.6126e-001", "9.6071e-001", "9.6016e-001", "9.5959e-001", "9.5903e-001", "9.5846e-001", "9.5788e-001", "9.5730e-001", 
                "9.5671e-001", "9.5611e-001", "9.5551e-001", "9.5491e-001", "9.5430e-001", "9.5368e-001", "9.5306e-001", "9.5243e-001", 
                "9.5179e-001", "9.5115e-001", "9.5050e-001", "9.4984e-001", "9.4918e-001", "9.4850e-001", "9.4782e-001", "9.4713e-001", 
                "9.4642e-001", "9.4571e-001", "9.4498e-001", "9.4425e-001", "9.4350e-001", "9.4274e-001", "9.4196e-001", "9.4117e-001", 
                "9.4037e-001", "9.3955e-001", "9.3872e-001", "9.3787e-001", "9.3700e-001", "9.3612e-001", "9.3522e-001", "9.3431e-001", 
                "9.3338e-001", "9.3243e-001", "9.3146e-001", "9.3047e-001", "9.2947e-001", "9.2845e-001", "9.2741e-001", "9.2635e-001", 
                "9.2527e-001", "9.2418e-001", "9.2307e-001", "9.2194e-001", "9.2079e-001", "9.1962e-001", "9.1844e-001", "9.1724e-001", 
                "9.1601e-001", "9.1478e-001", "9.1352e-001", "9.1224e-001", "9.1095e-001", "9.0963e-001", "9.0830e-001", "9.0695e-001", 
                "9.0558e-001", "9.0419e-001", "9.0278e-001", "9.0134e-001", "8.9989e-001", "8.9841e-001", "8.9691e-001", "8.9539e-001", 
                "8.9384e-001", "8.9227e-001", "8.9067e-001", "8.8905e-001", "8.8739e-001", "8.8571e-001", "8.8400e-001", "8.8226e-001", 
                "8.8048e-001", "8.7868e-001", "8.7684e-001", "8.7496e-001", "8.7305e-001", "8.7110e-001", "8.6911e-001", "8.6709e-001", 
                "8.6503e-001", "8.6292e-001", "8.6077e-001", "8.5859e-001", "8.5635e-001", "8.5408e-001", "8.5176e-001", "8.4940e-001", 
                "8.4699e-001", "8.4453e-001", "8.4203e-001", "8.3948e-001", "8.3688e-001", "8.3424e-001", "8.3154e-001", "8.2880e-001", 
                "8.2601e-001", "8.2317e-001", "8.2028e-001", "8.1735e-001", "8.1436e-001", "8.1132e-001", "8.0822e-001", "8.0508e-001", 
                "8.0189e-001", "7.9864e-001", "7.9534e-001", "7.9198e-001", "7.8857e-001", "7.8511e-001", "7.8159e-001", "7.7801e-001", 
                "7.7437e-001", "7.7067e-001", "7.6692e-001", "7.6310e-001", "7.5921e-001", "7.5526e-001", "7.5125e-001", "7.4717e-001", 
                "7.4301e-001", "7.3879e-001", "7.3449e-001", "7.3011e-001", "7.2566e-001", "7.2113e-001", "7.1651e-001", "7.1181e-001", 
                "7.0703e-001", "7.0215e-001", "6.9719e-001", "6.9213e-001", "6.8698e-001", "6.8173e-001", "6.7638e-001", "6.7093e-001", 
                "6.6538e-001", "6.5972e-001", "6.5396e-001", "6.4809e-001", "6.4210e-001", "6.3601e-001", "6.2980e-001", "6.2348e-001", 
                "6.1704e-001", "6.1048e-001", "6.0380e-001", "5.9701e-001", "5.9009e-001", "5.8305e-001", "5.7590e-001", "5.6862e-001", 
                "5.6121e-001", "5.5369e-001", "5.4604e-001", "5.3827e-001", "5.3039e-001", "5.2238e-001", "5.1425e-001", "5.0600e-001", 
                "4.9763e-001", "4.8915e-001", "4.8055e-001", "4.7184e-001", "4.6302e-001", "4.5409e-001", "4.4505e-001", "4.3592e-001", 
                "4.2668e-001", "4.1734e-001", "4.0791e-001", "3.9840e-001", "3.8879e-001", "3.7911e-001", "3.6936e-001", "3.5953e-001", 
                "3.4964e-001", "3.3969e-001", "3.2969e-001", "3.1965e-001", "3.0957e-001", "2.9946e-001", "2.8932e-001", "2.7918e-001", 
                "2.6903e-001", "2.5889e-001", "2.4877e-001", "2.3867e-001", "2.2861e-001", "2.1860e-001", "2.0864e-001", "1.9876e-001", 
                "1.8896e-001", "1.7926e-001", "1.6967e-001", "1.6020e-001", "1.5086e-001", "1.4168e-001", "1.3266e-001", "1.2381e-001", 
                "1.1516e-001", "1.0671e-001", "9.8477e-002", "9.0480e-002", "8.2729e-002", "7.5239e-002", "6.8022e-002", "6.1093e-002", 
                "5.4463e-002", "4.8146e-002", "4.2154e-002", "3.6498e-002", "3.1189e-002", "2.6238e-002", "2.1655e-002", "1.7449e-002", 
                "1.3628e-002", "1.0201e-002", "7.1737e-003", "4.5528e-003", "2.3434e-003", "5.4996e-004", "-8.2414e-004", "-1.7764e-003", 
                "-2.3051e-003", "-2.4098e-003", "-2.0907e-003", "-1.3492e-003", "-1.8751e-004", "1.3912e-003", "3.3829e-003", "5.7824e-003", 
                "8.5839e-003", "1.1781e-002", "1.5365e-002", "1.9328e-002", "2.3662e-002", "2.8356e-002", "3.3400e-002", "3.8782e-002", 
                "4.4491e-002", "5.0515e-002", "5.6841e-002", "6.3455e-002", "7.0346e-002", "7.7498e-002", "8.4899e-002", "9.2533e-002", 
                "1.0039e-001", "1.0845e-001", "1.1670e-001", "1.2512e-001", "1.3371e-001", "1.4245e-001", "1.5133e-001", "1.6032e-001", 
                "1.6942e-001", "1.7862e-001", "1.8790e-001", "1.9725e-001", "2.0665e-001", "2.1611e-001", "2.2559e-001", "2.3510e-001", 
                "2.4463e-001", "2.5416e-001", "2.6369e-001", "2.7320e-001", "2.8269e-001", "2.9215e-001", "3.0157e-001", "3.1095e-001", 
                "3.2028e-001", "3.2955e-001", "3.3876e-001", "3.4790e-001", "3.5698e-001", "3.6597e-001", "3.7488e-001", "3.8371e-001", 
                "3.9246e-001", "4.0111e-001", "4.0967e-001", "4.1813e-001", "4.2650e-001", "4.3476e-001", "4.4293e-001", "4.5099e-001", 
                "4.5894e-001", "4.6679e-001", "4.7454e-001", "4.8217e-001", "4.8970e-001", "4.9712e-001", "5.0443e-001", "5.1163e-001", 
                "5.1872e-001", "5.2571e-001", "5.3258e-001", "5.3934e-001", "5.4600e-001", "5.5254e-001", "5.5898e-001", "5.6531e-001", 
                "5.7153e-001", "5.7765e-001", "5.8366e-001", "5.8957e-001", "5.9538e-001", "6.0108e-001", "6.0669e-001", "6.1220e-001", 
                "6.1761e-001", "6.2292e-001", "6.2814e-001", "6.3327e-001", "6.3831e-001", "6.4326e-001", "6.4812e-001", "6.5290e-001", 
                "6.5760e-001", "6.6221e-001", "6.6675e-001", "6.7121e-001", "6.7560e-001", "6.7992e-001", "6.8416e-001", "6.8834e-001", 
                "6.9245e-001", "6.9649e-001", "7.0047e-001", "7.0439e-001", "7.0826e-001", "7.1206e-001", "7.1580e-001", "7.1949e-001", 
                "7.2313e-001", "7.2671e-001", "7.3024e-001", "7.3372e-001", "7.3715e-001", "7.4053e-001", "7.4385e-001", "7.4713e-001", 
                "7.5036e-001", "7.5354e-001", "7.5667e-001", "7.5976e-001", "7.6279e-001", "7.6578e-001", "7.6872e-001", "7.7161e-001", 
                "7.7445e-001", "7.7724e-001", "7.7999e-001", "7.8268e-001", "7.8533e-001", "7.8793e-001", "7.9048e-001", "7.9298e-001", 
                "7.9544e-001", "7.9784e-001", "8.0020e-001", "8.0251e-001", "8.0478e-001", "8.0700e-001", "8.0918e-001", "8.1131e-001", 
                "8.1340e-001", "8.1545e-001", "8.1746e-001", "8.1943e-001", "8.2136e-001", "8.2325e-001", "8.2510e-001", "8.2693e-001", 
                "8.2872e-001", "8.3048e-001", "8.3221e-001", "8.3391e-001", "8.3558e-001", "8.3723e-001", "8.3885e-001", "8.4045e-001", 
                "8.4203e-001", "8.4359e-001", "8.4513e-001", "8.4665e-001", "8.4815e-001", "8.4964e-001", "8.5111e-001", "8.5257e-001", 
                "8.5401e-001", "8.5543e-001", "8.5685e-001", "8.5824e-001", "8.5963e-001", "8.6099e-001", "8.6235e-001", "8.6369e-001", 
                "8.6501e-001", "8.6632e-001", "8.6761e-001", "8.6889e-001", "8.7015e-001", "8.7139e-001", "8.7261e-001", "8.7381e-001", 
                "8.7500e-001", "8.7616e-001", "8.7730e-001", "8.7842e-001", "8.7952e-001", "8.8060e-001", "8.8166e-001", "8.8269e-001", 
                "8.8370e-001", "8.8469e-001", "8.8566e-001", "8.8661e-001", "8.8753e-001", "8.8843e-001", "8.8932e-001", "8.9018e-001", 
                "8.9102e-001", "8.9185e-001", "8.9265e-001", "8.9344e-001", "8.9422e-001", "8.9498e-001", "8.9573e-001", "8.9647e-001", 
                "8.9719e-001", "8.9791e-001", "8.9861e-001", "8.9931e-001", "9.0001e-001", "9.0070e-001", "9.0138e-001", "9.0206e-001", 
                "9.0274e-001", "9.0341e-001", "9.0409e-001", "9.0476e-001", "9.0543e-001", "9.0611e-001", "9.0678e-001", "9.0745e-001", 
                "9.0812e-001", "9.0879e-001", "9.0946e-001", "9.1013e-001", "9.1080e-001", "9.1147e-001", "9.1213e-001", "9.1278e-001", 
                "9.1344e-001", "9.1408e-001", "9.1472e-001", "9.1536e-001", "9.1598e-001"
            };
            public string[] S11_imag = new string[] 
            {
                "-2.0176e-001", "-2.0294e-001", "-2.0414e-001", "-2.0534e-001", "-2.0655e-001", "-2.0777e-001", "-2.0900e-001", "-2.1024e-001", 
                "-2.1148e-001", "-2.1274e-001", "-2.1400e-001", "-2.1527e-001", "-2.1654e-001", "-2.1783e-001", "-2.1912e-001", "-2.2042e-001", 
                "-2.2172e-001", "-2.2303e-001", "-2.2435e-001", "-2.2567e-001", "-2.2700e-001", "-2.2833e-001", "-2.2967e-001", "-2.3101e-001", 
                "-2.3236e-001", "-2.3371e-001", "-2.3507e-001", "-2.3643e-001", "-2.3780e-001", "-2.3917e-001", "-2.4054e-001", "-2.4192e-001", 
                "-2.4331e-001", "-2.4470e-001", "-2.4609e-001", "-2.4749e-001", "-2.4889e-001", "-2.5030e-001", "-2.5172e-001", "-2.5314e-001", 
                "-2.5457e-001", "-2.5601e-001", "-2.5745e-001", "-2.5890e-001", "-2.6036e-001", "-2.6183e-001", "-2.6331e-001", "-2.6480e-001", 
                "-2.6630e-001", "-2.6781e-001", "-2.6933e-001", "-2.7086e-001", "-2.7240e-001", "-2.7395e-001", "-2.7552e-001", "-2.7709e-001", 
                "-2.7868e-001", "-2.8029e-001", "-2.8190e-001", "-2.8353e-001", "-2.8517e-001", "-2.8682e-001", "-2.8849e-001", "-2.9017e-001", 
                "-2.9186e-001", "-2.9356e-001", "-2.9527e-001", "-2.9700e-001", "-2.9874e-001", "-3.0048e-001", "-3.0224e-001", "-3.0401e-001", 
                "-3.0579e-001", "-3.0758e-001", "-3.0938e-001", "-3.1119e-001", "-3.1301e-001", "-3.1484e-001", "-3.1668e-001", "-3.1853e-001", 
                "-3.2038e-001", "-3.2224e-001", "-3.2412e-001", "-3.2600e-001", "-3.2789e-001", "-3.2978e-001", "-3.3169e-001", "-3.3361e-001", 
                "-3.3553e-001", "-3.3746e-001", "-3.3941e-001", "-3.4136e-001", "-3.4332e-001", "-3.4529e-001", "-3.4728e-001", "-3.4927e-001", 
                "-3.5128e-001", "-3.5330e-001", "-3.5533e-001", "-3.5737e-001", "-3.5943e-001", "-3.6150e-001", "-3.6358e-001", "-3.6568e-001", 
                "-3.6779e-001", "-3.6992e-001", "-3.7206e-001", "-3.7421e-001", "-3.7639e-001", "-3.7857e-001", "-3.8077e-001", "-3.8299e-001", 
                "-3.8522e-001", "-3.8747e-001", "-3.8973e-001", "-3.9200e-001", "-3.9429e-001", "-3.9659e-001", "-3.9891e-001", "-4.0123e-001", 
                "-4.0357e-001", "-4.0592e-001", "-4.0828e-001", "-4.1065e-001", "-4.1304e-001", "-4.1542e-001", "-4.1782e-001", "-4.2022e-001", 
                "-4.2264e-001", "-4.2505e-001", "-4.2747e-001", "-4.2990e-001", "-4.3233e-001", "-4.3476e-001", "-4.3719e-001", "-4.3963e-001", 
                "-4.4207e-001", "-4.4451e-001", "-4.4695e-001", "-4.4939e-001", "-4.5182e-001", "-4.5426e-001", "-4.5670e-001", "-4.5913e-001", 
                "-4.6157e-001", "-4.6400e-001", "-4.6643e-001", "-4.6886e-001", "-4.7129e-001", "-4.7371e-001", "-4.7613e-001", "-4.7855e-001", 
                "-4.8097e-001", "-4.8338e-001", "-4.8579e-001", "-4.8820e-001", "-4.9060e-001", "-4.9300e-001", "-4.9539e-001", "-4.9778e-001", 
                "-5.0017e-001", "-5.0255e-001", "-5.0492e-001", "-5.0728e-001", "-5.0964e-001", "-5.1198e-001", "-5.1431e-001", "-5.1663e-001", 
                "-5.1894e-001", "-5.2123e-001", "-5.2350e-001", "-5.2575e-001", "-5.2798e-001", "-5.3018e-001", "-5.3236e-001", "-5.3450e-001", 
                "-5.3661e-001", "-5.3869e-001", "-5.4073e-001", "-5.4273e-001", "-5.4468e-001", "-5.4658e-001", "-5.4843e-001", "-5.5022e-001", 
                "-5.5195e-001", "-5.5361e-001", "-5.5521e-001", "-5.5673e-001", "-5.5818e-001", "-5.5954e-001", "-5.6081e-001", "-5.6199e-001", 
                "-5.6308e-001", "-5.6406e-001", "-5.6494e-001", "-5.6570e-001", "-5.6635e-001", "-5.6687e-001", "-5.6726e-001", "-5.6752e-001", 
                "-5.6763e-001", "-5.6761e-001", "-5.6743e-001", "-5.6709e-001", "-5.6659e-001", "-5.6591e-001", "-5.6506e-001", "-5.6403e-001", 
                "-5.6281e-001", "-5.6140e-001", "-5.5978e-001", "-5.5795e-001", "-5.5592e-001", "-5.5366e-001", "-5.5117e-001", "-5.4845e-001", 
                "-5.4549e-001", "-5.4228e-001", "-5.3882e-001", "-5.3510e-001", "-5.3112e-001", "-5.2686e-001", "-5.2233e-001", "-5.1752e-001", 
                "-5.1242e-001", "-5.0703e-001", "-5.0135e-001", "-4.9536e-001", "-4.8908e-001", "-4.8248e-001", "-4.7557e-001", "-4.6835e-001", 
                "-4.6082e-001", "-4.5296e-001", "-4.4480e-001", "-4.3631e-001", "-4.2750e-001", "-4.1838e-001", "-4.0895e-001", "-3.9920e-001", 
                "-3.8915e-001", "-3.7879e-001", "-3.6812e-001", "-3.5717e-001", "-3.4592e-001", "-3.3440e-001", "-3.2259e-001", "-3.1053e-001", 
                "-2.9821e-001", "-2.8564e-001", "-2.7284e-001", "-2.5981e-001", "-2.4658e-001", "-2.3314e-001", "-2.1953e-001", "-2.0574e-001", 
                "-1.9180e-001", "-1.7772e-001", "-1.6351e-001", "-1.4920e-001", "-1.3480e-001", "-1.2032e-001", "-1.0579e-001", "-9.1215e-002", 
                "-7.6622e-002", "-6.2025e-002", "-4.7442e-002", "-3.2891e-002", "-1.8389e-002", "-3.9530e-003", "1.0399e-002", "2.4650e-002", 
                "3.8784e-002", "5.2786e-002", "6.6638e-002", "8.0327e-002", "9.3837e-002", "1.0715e-001", "1.2027e-001", "1.3316e-001", 
                "1.4583e-001", "1.5825e-001", "1.7042e-001", "1.8233e-001", "1.9397e-001", "2.0533e-001", "2.1641e-001", "2.2719e-001", 
                "2.3768e-001", "2.4786e-001", "2.5774e-001", "2.6732e-001", "2.7658e-001", "2.8552e-001", "2.9416e-001", "3.0248e-001", 
                "3.1049e-001", "3.1818e-001", "3.2557e-001", "3.3265e-001", "3.3942e-001", "3.4589e-001", "3.5207e-001", "3.5795e-001", 
                "3.6355e-001", "3.6886e-001", "3.7389e-001", "3.7865e-001", "3.8314e-001", "3.8738e-001", "3.9136e-001", "3.9509e-001", 
                "3.9858e-001", "4.0183e-001", "4.0486e-001", "4.0766e-001", "4.1025e-001", "4.1263e-001", "4.1480e-001", "4.1678e-001", 
                "4.1858e-001", "4.2018e-001", "4.2161e-001", "4.2287e-001", "4.2396e-001", "4.2490e-001", "4.2568e-001", "4.2631e-001", 
                "4.2680e-001", "4.2715e-001", "4.2737e-001", "4.2747e-001", "4.2744e-001", "4.2730e-001", "4.2704e-001", "4.2668e-001", 
                "4.2621e-001", "4.2565e-001", "4.2499e-001", "4.2425e-001", "4.2342e-001", "4.2251e-001", "4.2152e-001", "4.2046e-001", 
                "4.1933e-001", "4.1814e-001", "4.1688e-001", "4.1557e-001", "4.1421e-001", "4.1279e-001", "4.1133e-001", "4.0982e-001", 
                "4.0828e-001", "4.0669e-001", "4.0507e-001", "4.0342e-001", "4.0174e-001", "4.0003e-001", "3.9829e-001", "3.9653e-001", 
                "3.9475e-001", "3.9296e-001", "3.9114e-001", "3.8931e-001", "3.8746e-001", "3.8560e-001", "3.8373e-001", "3.8185e-001", 
                "3.7995e-001", "3.7805e-001", "3.7614e-001", "3.7421e-001", "3.7228e-001", "3.7034e-001", "3.6840e-001", "3.6644e-001", 
                "3.6448e-001", "3.6251e-001", "3.6053e-001", "3.5854e-001", "3.5654e-001", "3.5454e-001", "3.5253e-001", "3.5051e-001", 
                "3.4848e-001", "3.4644e-001", "3.4439e-001", "3.4234e-001", "3.4028e-001", "3.3821e-001", "3.3614e-001", "3.3406e-001", 
                "3.3197e-001", "3.2987e-001", "3.2778e-001", "3.2567e-001", "3.2357e-001", "3.2146e-001", "3.1935e-001", "3.1724e-001", 
                "3.1513e-001", "3.1303e-001", "3.1093e-001", "3.0883e-001", "3.0673e-001", "3.0465e-001", "3.0257e-001", "3.0050e-001", 
                "2.9844e-001", "2.9639e-001", "2.9435e-001", "2.9233e-001", "2.9032e-001", "2.8832e-001", "2.8634e-001", "2.8437e-001", 
                "2.8242e-001", "2.8049e-001", "2.7857e-001", "2.7667e-001", "2.7478e-001", "2.7291e-001", "2.7106e-001", "2.6922e-001", 
                "2.6740e-001", "2.6560e-001", "2.6380e-001", "2.6202e-001", "2.6026e-001", "2.5850e-001", "2.5676e-001", "2.5502e-001", 
                "2.5330e-001", "2.5158e-001", "2.4987e-001", "2.4816e-001", "2.4647e-001", "2.4477e-001", "2.4308e-001", "2.4140e-001", 
                "2.3972e-001", "2.3804e-001", "2.3636e-001", "2.3468e-001", "2.3301e-001", "2.3133e-001", "2.2966e-001", "2.2799e-001", 
                "2.2632e-001", "2.2465e-001", "2.2299e-001", "2.2132e-001", "2.1967e-001", "2.1801e-001", "2.1636e-001", "2.1472e-001", 
                "2.1308e-001", "2.1145e-001", "2.0983e-001", "2.0821e-001", "2.0661e-001", "2.0502e-001", "2.0344e-001", "2.0187e-001", 
                "2.0032e-001", "1.9878e-001", "1.9725e-001", "1.9574e-001", "1.9424e-001", "1.9276e-001", "1.9130e-001", "1.8985e-001", 
                "1.8842e-001", "1.8700e-001", "1.8560e-001", "1.8422e-001", "1.8285e-001", "1.8149e-001", "1.8015e-001", "1.7882e-001", 
                "1.7750e-001", "1.7619e-001", "1.7490e-001", "1.7361e-001", "1.7233e-001", "1.7106e-001", "1.6979e-001", "1.6853e-001", 
                "1.6727e-001", "1.6602e-001", "1.6477e-001", "1.6351e-001", "1.6226e-001", "1.6101e-001", "1.5975e-001", "1.5850e-001", 
                "1.5724e-001", "1.5598e-001", "1.5471e-001", "1.5344e-001", "1.5217e-001"
            };
        }

        [Fact]
        public void NF2FF_Generate2DInputXml_MatchesReference()
        {
            var nf2ff = new NF2FF(2400e6);
            nf2ff.SetPolarMesh2D();

            XElement dutNf2ffXml = nf2ff.ToXDocument().Element("nf2ff");
            XElement refNf2ffXml = XDocument.Load("ref_nf2ff_2d_input.xml").Element("nf2ff");;

            double[] dutTheta = (from l in dutNf2ffXml.Element("theta").Value.Split(',') select Double.Parse(l, CultureInfo.InvariantCulture)).ToArray();
            double[] refTheta = (from l in refNf2ffXml.Element("theta").Value.Split(',') select Double.Parse(l, CultureInfo.InvariantCulture)).ToArray();
            for (int i = 0; i < dutTheta.Length; i++)
            {
                Assert.Equal(refTheta[i], dutTheta[i], 12);
            }
            double x = 1.1;
            x.ToString();
            double[] dutPhi = (from l in dutNf2ffXml.Element("theta").Value.Split(',') select Double.Parse(l, CultureInfo.InvariantCulture)).ToArray();
            double[] refPhi = (from l in refNf2ffXml.Element("theta").Value.Split(',') select Double.Parse(l, CultureInfo.InvariantCulture)).ToArray();
            for (int i = 0; i < dutTheta.Length; i++)
            {
                Assert.Equal(refPhi[i], dutPhi[i], 12);
            }
        }

        /// <summary>
        /// Uses the Simple_Patch_Antenna.m demo as a reference.
        /// </summary>
        [Fact]
        public void NF2FF_GenerateVtkDump_MatchesReference()
        {
            var nf2ff = new NF2FF(1e9, "ref_3D_pattern_patch.h5");
            nf2ff.ReadHDF5Result();
            nf2ff.ToVTK(fileName: "dut_3D_pattern.vtk");
        }

        /// <summary>
        /// Post-process the output of the Dipole SAR openEMS simulation and compare it with the
        /// reference simulation NF2FF output.
        /// </summary>
        [Fact]
        public void NF2FF_ProcessDipoleSAR_MatchesReference()
        {
            double f0 = 1e9;
            double refRadiatedPower = 4.479322349004468e-028;
            string outFileName = "ref_3D_pattern_sar.h5";

            var nf2ff = new Postprocess.NF2FF(f0, outFileName);

            /*
            string inFileName = "ref_nf2ff_3d_input.xml";
            nf2ff.ToXDocument().Save(inFileName);

            Process n = new Process();
            n.StartInfo.FileName = @"C:\openEMS\nf2ff.exe ";
            n.StartInfo.Arguments = "nf2ff.xml " + inFileName;
            n.StartInfo.UseShellExecute = false;
            n.Start();
            n.WaitForExit();
            if (n.ExitCode != 0)
            {
                Console.WriteLine("Running nf2ff.exe failed.");
            }
            Assert.Equal(0, n.ExitCode);
            */

            nf2ff.ReadHDF5Result();
            Assert.Equal(refRadiatedPower, nf2ff.RadiatedPower);
        }

        /// <summary>
        /// Post-process the output of the Dipole SAR openEMS simulation and compare it with the
        /// reference simulation SAR output.
        /// </summary>
        [Fact]
        public void DipoleSar_Sar_MatchesReference()
        {
            double f0 = 1e9;
            double r = 50;
            double refPin_f0 = 1.420492702441687e-027;
            double refMaxvalue = 3.336527874272695e-026;

            double[] freqs = Utility.LinearSpace(500e6, 1500e6, 501);
            var lumpedPort = new LumpedPort(0, 1, r, new Vector3D(-10, -1, -1), new Vector3D(10, 1, 1), ENormDir.X, true);
            lumpedPort.ReadResults(freqs);
            double dutPin_f0 = lumpedPort.GetPFdInAt(f0);

            string sarFileName = @"ref_dipole_sar_dump.h5";
            var sarDump = new SAR(sarFileName);

            Assert.Equal(String.Format("{0:e15}", refPin_f0), String.Format("{0:e15}", dutPin_f0));
            Assert.Equal(String.Format("{0:e15}", refMaxvalue), String.Format("{0:e15}", sarDump.MaxValue));
            Assert.Equal(String.Format("{0:e15}", refMaxvalue / refPin_f0), String.Format("{0:e15}", sarDump.MaxValue / dutPin_f0));
        }

        [Fact]
        [Trait("Category", "Developer")]
        public void SAR_GetBoundingMeshIndeces_OutOfRangeInput_ThrowsException()
        {
            double[][] mesh = SAR_BuildExampleMesh();
            Postprocess.FieldSlice fieldSlice = new FieldSlice(mesh, null);
            Assert.Throws<ArgumentException>(
                delegate
                {
                    fieldSlice.GetBoundingMeshIndeces(mesh[0][0] - 1.0, mesh[1][0] - 1.0);
                });
        }

        [Fact]
        public void SAR_GetBoundingMeshIndeces_CornerInput_ReturnsCorrectValue()
        {
            double[][] mesh = SAR_BuildExampleMesh();
            Postprocess.FieldSlice fieldSlice = new FieldSlice(mesh, null);

            int[,] refIndeces = new int[2,2] { {0, 0}, {0, 0} };
            int[,] dutIndeces = fieldSlice.GetBoundingMeshIndeces(mesh[0][0], mesh[1][0]);

            Assert.Equal(refIndeces, dutIndeces);
        }

        [Fact]
        public void SAR_GetBoundingMeshIndeces_SemiGridPointInput_ReturnsCorrectValue()
        {
            double[][] mesh = SAR_BuildExampleMesh();
            Postprocess.FieldSlice fieldSlice = new FieldSlice(mesh, null);

            int[,] refIndeces = new int[2,2] { {1, 1}, {1, 2} };
            int[,] dutIndeces = fieldSlice.GetBoundingMeshIndeces(mesh[0][1], mesh[1][1] + 0.1);

            Assert.Equal(refIndeces, dutIndeces);
        }

        [Fact]
        public void SAR_GetBoundingMeshIndeces_ExactGridPointInput_ReturnsCorrectValue()
        {
            double[][] mesh = SAR_BuildExampleMesh();
            Postprocess.FieldSlice fieldSlice = new FieldSlice(mesh, null);

            int[,] refIndeces = new int[2,2] { {1, 1}, {1, 1} };
            int[,] dutIndeces = fieldSlice.GetBoundingMeshIndeces(mesh[0][1], mesh[1][1]);

            Assert.Equal(refIndeces, dutIndeces);
        }

        [Fact]
        public void SAR_GetBoundingMeshIndeces_NonGridPointInput_ReturnsCorrectValue()
        {
            double[][] mesh = SAR_BuildExampleMesh();
            Postprocess.FieldSlice fieldSlice = new FieldSlice(mesh, null);

            int[,] refIndeces = new int[2,2] { {1, 2}, {1, 2} };
            int[,] dutIndeces = fieldSlice.GetBoundingMeshIndeces(mesh[0][1] + 0.1, mesh[1][1] + 0.1);

            Assert.Equal(refIndeces, dutIndeces);
        }

        [Fact]
        [Trait("Category", "Developer")]
        public void SAR_GetValueAt_OutOfRangeInput_ThrowsException()
        {
            double refFieldValue = 2.0;
            double[][] mesh = SAR_BuildExampleMesh();
            double[,] field = SAR_BuildConstantField(mesh, refFieldValue);
            Postprocess.FieldSlice fieldSlice = new FieldSlice(mesh, field);
            Assert.Throws<ArgumentException>(
                delegate
                {
                    fieldSlice.GetBoundingMeshIndeces(mesh[0][0] - 1.0, mesh[1][0] - 0.0);
                });
        }

        [Fact]
        public void SAR_GetValueAt_SemiGridPoint_ReturnsGridPointValue()
        {
            double refFieldValue = 2.0;
            double[][] mesh = SAR_BuildExampleMesh();
            double[,] field = SAR_BuildConstantField(mesh, refFieldValue);
            Postprocess.FieldSlice fieldSlice = new FieldSlice(mesh, field);

            double dutFieldValue = fieldSlice.GetValueAt((mesh[0][1] + mesh[0][2]) / 2, mesh[1][1]);

            Assert.Equal(refFieldValue, dutFieldValue);
        }

        [Fact]
        public void SAR_GetValueAt_ExactGridPoint_ReturnsGridPointValue()
        {
            double refFieldValue = 2.0;
            double[][] mesh = SAR_BuildExampleMesh();
            double[,] field = SAR_BuildConstantField(mesh, refFieldValue);
            Postprocess.FieldSlice fieldSlice = new FieldSlice(mesh, field);

            double dutFieldValue = fieldSlice.GetValueAt(mesh[0][1], mesh[1][1]);

            Assert.Equal(refFieldValue, dutFieldValue);
        }

        [Fact]
        public void SAR_GetValueAt_NonGridPoint_ReturnsGridPointValue()
        {
            double refFieldValue = 2.0;
            double[][] mesh = SAR_BuildExampleMesh();
            double[,] field = SAR_BuildConstantField(mesh, refFieldValue);
            Postprocess.FieldSlice fieldSlice = new FieldSlice(mesh, field);

            double dutFieldValue = fieldSlice.GetValueAt((mesh[0][1] + mesh[0][2]) / 2, (mesh[1][1] + mesh[1][2]) / 2); 

            Assert.Equal(refFieldValue, dutFieldValue);
        }

        private double[][] SAR_BuildExampleMesh()
        {
            double[][] mesh = new double[2][]
            {
                new double[] {0, 1, 2, 3},
                new double[] {0, 1, 2, 3}
            };
            return mesh;
        }

        private double[,] SAR_BuildLinearField(double[][] mesh)
        {
            double[,] field = new double[mesh[0].Length, mesh[1].Length];

            for (int i = 0; i < mesh[0].Length; i++)
            {
                for (int j = 0; j < mesh[1].Length; j++)
                {
                    field[i, j] = mesh[0][i] + mesh[1][j];
                }
            }

            return field;
        }

        private double[,] SAR_BuildConstantField(double[][] mesh, double value = 1.0)
        {
            double[,] field = new double[mesh[0].Length, mesh[1].Length];

            for (int i = 0; i < mesh[0].Length; i++)
            {
                for (int j = 0; j < mesh[1].Length; j++)
                {
                    field[i, j] = value;
                }
            }

            return field;
        }
    }
}
