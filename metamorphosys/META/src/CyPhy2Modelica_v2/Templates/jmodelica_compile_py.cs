// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhy2Modelica_v2.Templates
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    
    #line 1 "C:\META\meta_trunk\src\CyPhy2Modelica_v2\Templates\jmodelica_compile_py.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class jmodelica_compile_py : jmodelica_compile_pyBase
    {
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write(" \r\n# ---------------------------------------------------------\r\n# Auto generated " +
                    "from jmodelica_compile_py.tt\r\n# Execute this script using system Python (with JM" +
                    "odelica)\r\n# ---------------------------------------------------------\r\nimport os" +
                    "\r\nimport sys\r\nimport json\r\nimport logging\r\n\r\ntry:\r\n    from pymodelica import co" +
                    "mpile_fmu  # JModelica.org\'s \'pymodelica\', NOT ISIS\' \'py_modelica\'\r\nexcept:\r\n   " +
                    " print \"pymodelica module was not found. Call this script using system Python.\"\r" +
                    "\n\r\nfrom optparse import OptionParser\r\n\r\nparser = OptionParser()\r\nparser.add_opti" +
                    "on(\"-n\", \"--name\", dest=\"model_name\", help=\"Path to Modelica model within its pa" +
                    "ckage\")\r\n\r\nlogging.basicConfig(filename=\"j_compile.log\",\r\n                    le" +
                    "vel=logging.DEBUG,\r\n                    format=\"%(asctime)s %(levelname)s: %(mes" +
                    "sage)s\",\r\n                    datefmt=\"%Y-%m-%d %H:%M:%S\")\r\n\r\ndef compile_model(" +
                    "modelica_class, extra_libs):\r\n\r\n    # Rather than \'CyPhy.TestBenches.TBName_cfg0" +
                    "00\', => \'TBName_cfg000\'\r\n    fmu_file_name = modelica_class.split(\'.\')[-1] + \'.f" +
                    "mu\'\r\n\r\n    # Create the compiled fmu binary file from the Modelica model\r\n    # " +
                    "py_modelica has already added all Libraries to %MODELICAPATH%\r\n    try:\r\n       " +
                    " compiled_fmu = compile_fmu(modelica_class, compile_to=fmu_file_name, compiler_o" +
                    "ptions={\'extra_lib_dirs\':extra_libs})\r\n        log.info(\'FMU was compiled: {0}\'." +
                    "format(compiled_fmu))\r\n    except:\r\n        log.error(\'Problem compiling fmu fro" +
                    "m modelica model.\')\r\n        log.error(\'%MODELICAPATH may not be set properly.\')" +
                    "\r\n        raise\r\n\r\n\r\ndef main():\r\n    log = logging.getLogger()\r\n    working_dir" +
                    " = os.getcwd()  # should be CyPhy\r\n    this_script_path = os.path.abspath(__file" +
                    "__)\r\n\r\n    log.info(\'Running {0} from {1}\'.format(this_script_path, working_dir)" +
                    ")\r\n\r\n    (options, args) = parser.parse_args()\r\n    modelica_class = options.mod" +
                    "el_name\r\n\r\n    if not modelica_class:\r\n        log.info(\'modelica_class not spec" +
                    "ified in options, trying to load model_config.json\')\r\n        with open(\'model_c" +
                    "onfig.json\') as f_in:\r\n            model_config = json.load(f_in)\r\n            m" +
                    "odelica_class = model_config[\'model_name\']\r\n            lib_package_paths = mode" +
                    "l_config[\'lib_package_paths\']\r\n\r\n    libraries = []\r\n    libraries.append(os.pat" +
                    "h.abspath(\'..\'))\r\n    for lib_path in lib_package_paths:\r\n        libraries.appe" +
                    "nd(os.path.abspath(lib_path))\r\n\r\n    log.info(\'libraries : {0}\'.format(libraries" +
                    "))\r\n\r\n    compile_model(modelica_class, libraries)\r\n\r\n\r\nif __name__ == \'__main__" +
                    "\':\r\n    log = logging.getLogger()\r\n    root_dir = os.getcwd()\r\n\r\n    try:\r\n     " +
                    "   main()\r\n    except:\r\n        import traceback\r\n        trace = traceback.form" +
                    "at_exc()\r\n        with open(os.path.join(root_dir, \'_j_compile_FAILED.txt\'), \'wb" +
                    "\') as f_out:\r\n            f_out.write(trace)\r\n        log.error(\'See {0} for det" +
                    "ails.\'.format(os.path.join(root_dir, \'_j_compile_FAILED.txt\')))\r\n        sys.exi" +
                    "t(2)\r\n\r\n\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 95 "C:\META\meta_trunk\src\CyPhy2Modelica_v2\Templates\jmodelica_compile_py.tt"
 public string ToolName ="";
	public string DymolaHome = "";
    public string ResultMatFile = "";
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class jmodelica_compile_pyBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
