// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhy2Modelica_v2.Templates
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    
    #line 1 "C:\Users\meta\Documents\META\src\CyPhy2Modelica_v2\Templates\compile_and_run_jmodelica_py.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class compile_and_run_jmodelica_py : compile_and_run_jmodelica_pyBase
    {
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write("\r\n# -----------------------------------------------------\r\n# Auto generated from " +
                    "compile_and_run_jmodelica_py.tt\r\n# ---------------------------------------------" +
                    "--------\r\n\r\nimport os\r\nimport sys\r\nimport json\r\n\r\nimport matplotlib.pyplot as pl" +
                    "t\r\n\r\ntry:\r\n    from pymodelica import compile_fmu # JModelica.org\'s \'pymodelica\'" +
                    ", NOT ISIS\' \'py_modelica\'\r\n    from pyfmi import load_fmu\r\nexcept:\r\n    print \"J" +
                    "Modelica \'pymodelica\' or \'pyfmi\' module was not found. Make sure to call this sc" +
                    "ript using the system Python.\"\r\n    \r\n#  Helper function to read in the simulati" +
                    "on config file\r\ndef load_model_config(model_config_file_path):\r\n\r\n    with open(" +
                    "model_config_file_path) as f_in:\r\n        model_config = json.load(f_in)\r\n      " +
                    "  \r\n    return model_config\r\n\r\n    \r\ndef run_jmodelica_simulation(generated_resu" +
                    "lt_dir):\r\n\r\n    external_libraries_dir = os.path.join(generated_result_dir, \"Lib" +
                    "raries\")\r\n    model_config_file = os.path.join(generated_result_dir, \"CyPhy\\\\mod" +
                    "el_config.json\")\r\n    fmu_output_dir = os.path.join(generated_result_dir, os.pat" +
                    "h.join(\"CyPhy\", \"jmodelica_results\"))\r\n    \r\n    if not os.path.isdir(fmu_output" +
                    "_dir):\r\n        os.makedirs(fmu_output_dir)\r\n\r\n    # Read the model_config.json " +
                    "and get relevant info\r\n    model_config = load_model_config(model_config_file)\r\n" +
                    "    testbench_class = model_config[\"model_name\"]\r\n    start_time = model_config[" +
                    "\"experiment\"][\'StartTime\']\r\n    stop_time = model_config[\"experiment\"][\'StopTime" +
                    "\']\r\n    \r\n    compile_fmu_options = dict()\r\n    modelica_library_dirs = list()\r\n" +
                    "\r\n    # Add the generated CyPhy package, which contains \'Components\', \'Component" +
                    "Assemblies\', \'TestBenches\', \'TestComponents\'\r\n    modelica_library_dirs.append(g" +
                    "enerated_result_dir)\r\n    # Add any external packages, e.g., C2M2L_Ext, C2M2L_OM" +
                    ", C2M2L_Decl, ModifiedMass in \'%result_dir&\\\\Libraries\'\r\n    modelica_library_di" +
                    "rs.append(external_libraries_dir)\r\n\r\n    compile_fmu_options.update({\"extra_lib_" +
                    "dirs\": modelica_library_dirs})\r\n    \r\n    # Move inside the new output directory" +
                    " in preparation to run simulation\r\n    os.chdir(fmu_output_dir)\r\n\r\n    # Create " +
                    "the compiled fmu binary file from the \'Testbench\' Modelica model\r\n    #compiled_" +
                    "testbench_fmu = compile_fmu(testbench_class, compile_to=fmu_output_dir, compiler" +
                    "_options=compile_fmu_options)\r\n    compiled_testbench_fmu = compile_fmu(testbenc" +
                    "h_class, compiler_options=compile_fmu_options)\r\n    \r\n    # Load the new fmu as " +
                    "an object for simulation\r\n    executable_testbench = load_fmu(compiled_testbench" +
                    "_fmu)\r\n    \r\n    # Run the simulation and save the result object\r\n    sim_result" +
                    " = executable_testbench.simulate(float(start_time), float(stop_time))\r\n    \r\n   " +
                    " # Move back to the result_directory\r\n    os.chdir(generated_result_dir)\r\n    \r\n" +
                    "    return sim_result\r\n    \r\ndef plot_results(list_of_var_names, results, plot_t" +
                    "itle):\r\n\r\n    plt.figure(1)\r\n\r\n    time = results[\'time\']\r\n\r\n    for var_name in" +
                    " list_of_var_names:\r\n        data_series = results[var_name]\r\n        plt.plot(t" +
                    "ime, data_series, label = var_name)\r\n        \r\n    plt.legend(loc=8)\r\n    plt.ti" +
                    "tle(plot_title)\r\n    plt.xlabel(\'Time (s)\')\r\n    \r\n    plot_file = plot_title + " +
                    "\'.svg\'\r\n    if not os.path.isdir(\'plots\'):\r\n        os.mkdir(\'plots\')\r\n    plot_" +
                    "rel_path = os.path.join(\'plots\', plot_file)\r\n    plt.savefig(plot_rel_path)\r\n   " +
                    " \r\n    #plt.show()\r\n    \r\n    \r\ndef main():\r\n\r\n    this_script_path = os.path.ab" +
                    "spath(__file__)\r\n    scripts_dir = os.path.dirname(this_script_path)\r\n    result" +
                    "_dir = os.path.abspath(os.path.join(scripts_dir, \'..\'))\r\n    \r\n    os.chdir(resu" +
                    "lt_dir)\r\n\r\n    simulation_results = run_jmodelica_simulation(result_dir)\r\n    \r\n" +
                    "    results_to_plot = list()\r\n    #results_to_plot.append(\'SpeedSensor.v\')  # th" +
                    "is is hard-coded for MSD... we need to solve this issue somehow.\r\n    \r\n    if l" +
                    "en(results_to_plot) > 0:\r\n        plot_results(results_to_plot, simulation_resul" +
                    "ts, os.path.basename(result_dir))\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    \r\n    roo" +
                    "t_dir = os.getcwd()\r\n\r\n    try:\r\n        main()\r\n    except:\r\n        import tra" +
                    "ceback\r\n        trace = traceback.format_exc()\r\n        # Generate this file on " +
                    "failed executions, https://github.com/scipy/scipy/issues/1840\r\n        with open" +
                    "(os.path.join(root_dir, \'_jmodelica_FAILED.txt\'), \'wb\') as f_out:\r\n            f" +
                    "_out.write(trace)\r\n        sys.exit(1)\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 134 "C:\Users\meta\Documents\META\src\CyPhy2Modelica_v2\Templates\compile_and_run_jmodelica_py.tt"
 public string ToolName ="";
	public string DymolaHome = "";
    public string ResultMatFile = "";
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class compile_and_run_jmodelica_pyBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
