// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhy2Modelica_v2.Templates
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    
    #line 1 "C:\Users\meta\Documents\META\src\CyPhy2Modelica_v2\Templates\simulate_py.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class simulate_py : simulate_pyBase
    {
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write("#!/usr/bin/python\r\n# ---------------------------------------------------\r\n# Auto " +
                    "generated from simulate.tt\r\n# --------------------------------------------------" +
                    "-\r\nimport os\r\nimport sys\r\nimport json\r\nimport logging\r\nimport subprocess\r\nimport" +
                    " time\r\n\r\nROOT_DIR = os.getcwd()  # make sure to change back to this when exiting" +
                    "\r\n\r\ntry:\r\n    import py_modelica as pym\r\n    print \'Found py_modelica in virtual" +
                    " python environment\'\r\nexcept ImportError as err:\r\n    print err.message\r\n    pri" +
                    "nt \'Use META virtual python environment\'\r\n\r\nfrom optparse import OptionParser\r\n\r" +
                    "\nparser = OptionParser()\r\nparser.add_option(\"-t\", \"--tool\", dest=\"tool\",\r\n      " +
                    "            help=\"Name of the tool like Dymola OpenModelica\",\r\n                 " +
                    " default=\"Dymola\")\r\n\r\n\r\ndef _exit_on_failure(error_message):\r\n    \"\"\" Function f" +
                    "or exiting after a failure.\r\n    \"\"\"\r\n    os.chdir(ROOT_DIR)\r\n    print error_me" +
                    "ssage\r\n    import traceback\r\n    the_trace = traceback.format_exc()\r\n    #traceb" +
                    "ack.print_exc(file=sys.stderr)\r\n    with open(\'_FAILED.txt\', \'wb\') as f_out:\r\n  " +
                    "      f_out.writelines(error_message)\r\n        f_out.writelines(traceback.format" +
                    "_exc())\r\n    pym.update_analysis_status(\'FAILED\', error_message, \'testbench_mani" +
                    "fest.json\')\r\n    log = logging.getLogger()\r\n    log.error(error_message)\r\n    lo" +
                    "g.error(\"Exception was raised : {0}\".format(traceback.format_exc()))\r\n    sys.ex" +
                    "it(1)\r\n\r\n\r\ndef init_and_compile_test_bench(tool_name=\'Dymola\',\r\n                " +
                    "                result_mat_file=\'\',\r\n                                dymola_home" +
                    "=\'\',\r\n                                model_config_file=\'model_config.json\'):\r\n " +
                    "   \"\"\"\r\n    Instantiates a new tool for simulation,\r\n    compiles and then retur" +
                    "ns with the tool. \r\n\r\n    Raises ModelicaError if instantiation or\r\n    compilat" +
                    "ion fails.\r\n    \"\"\"\r\n\r\n    with open(model_config_file) as file_model:\r\n        " +
                    "model_config = json.load(file_model)\r\n    result_mat_file = model_config[\'result" +
                    "_file\']\r\n    del model_config[\'result_file\']\r\n\r\n    # Instantiate Modelica-Tool\r" +
                    "\n    if tool_name == \'OpenModelica\':\r\n        modelica_tool = pym.OpenModelica(m" +
                    "odel_config)\r\n        modelica_tool.short_name = result_mat_file\r\n    elif tool_" +
                    "name == \'Dymola\':\r\n        modelica_tool = pym.Dymola(model_config)\r\n        mod" +
                    "elica_tool.result_mat = \'{0}.mat\'.format(result_mat_file) \r\n    elif tool_name =" +
                    "= \'JModelica\':\r\n        modelica_tool = pym.JModelica(model_config)\r\n\r\n    # Com" +
                    "pile\r\n    modelica_tool.compile_model()\r\n\r\n    return modelica_tool\r\n\r\n\r\ndef exe" +
                    "cute_test_bench(modelica_tool, report_file):\r\n    \"\"\"\r\n    Reads in parameters f" +
                    "rom testbench_manifest.json and simulates the\r\n    test bench. When done, writes" +
                    " metrics to testbench_manifest.json\r\n\r\n    Can raise ModelicaError\r\n    \"\"\"\r\n   " +
                    " cur_dir = os.getcwd()\r\n    log = logging.getLogger()\r\n    log.debug(\'inside sim" +
                    "ulate.py : execute_test_bench, cwd = {0}\'.format(cur_dir))\r\n\r\n    # Read in para" +
                    "meters        \r\n    parameters = pym.get_parameters_from_report_json(report_file" +
                    ")\r\n    log.info(\'Parameters : {0}\'.format(parameters))\r\n    if parameters:\r\n    " +
                    "    modelica_tool.change_parameter(parameters)\r\n\r\n    # Simulate model\r\n    mode" +
                    "lica_tool.simulate_model()\r\n    t_1 = time.time()\r\n\r\n    # TODO: uncomment the l" +
                    "ine once META-1226 is complete\r\n    ## pym.update_metrics_and_check_limits(model" +
                    "ica_tool.result_mat, \'model_config.json\')\r\n\r\n    t_mat = time.time() - t_1\r\n\r\n  " +
                    "  # Run PostProcessing scripts\r\n    # Look for this file after post-processing s" +
                    "cript ran and delete it when starting a new run.\r\n    # META-2909 and META-2784\r" +
                    "\n    pp_failed = os.path.abspath(os.path.join(cur_dir, \'..\', \'_POST_PROCESSING_F" +
                    "AILED.txt\'))\r\n    if os.path.isfile(pp_failed):\r\n        log.info(\'Found {0} fro" +
                    "m previous run, deleting it...\'.format(pp_failed))\r\n        os.remove(pp_failed)" +
                    "\r\n    exception = None\r\n    try:\r\n        t_post = pym.run_post_scripts(modelica" +
                    "_tool.result_mat, log)\r\n    except subprocess.CalledProcessError as err:\r\n      " +
                    "  exception = err\r\n    finally:\r\n        pp_output = \'\'\r\n        if exception:\r\n" +
                    "            pp_output = \'Post-script execution returned with error. : {0}\'.forma" +
                    "t(err.returncode)\r\n        if os.path.isfile(pp_failed):\r\n            with open(" +
                    "pp_failed, \'r\') as f_in:\r\n                pp_output = \'{0}\\n POST_PROCESSING_FAI" +
                    "LED :\\n {1}\'.format(pp_output, f_in.read())\r\n        if pp_output:\r\n            " +
                    "raise pym.ModelicaError(pp_output)\r\n\r\n    pym.update_analysis_status(new_status=" +
                    "\"OK\", report_file=report_file)\r\n    \r\n    return t_mat, t_post    \r\n\r\n\r\ndef main" +
                    "():\r\n    if not os.path.isdir(\'log\'):\r\n        os.mkdir(\'log\')\r\n    log = pym.in" +
                    "stantiate_logger(os.path.join(\'log\', \'dynamics_debug.log\'))\r\n    (options, args)" +
                    " = parser.parse_args()\r\n    tool_name = options.tool\r\n\r\n    # Set up paths\r\n    " +
                    "this_file_path = os.path.dirname(os.path.abspath(__file__))\r\n    os.chdir(os.pat" +
                    "h.join(this_file_path, \'..\', \'CyPhy\'))\r\n    print \'current dir {0}\'.format(os.ge" +
                    "tcwd())\r\n    report_file = os.path.join(\'..\', \'testbench_manifest.json\')\r\n\r\n    " +
                    "try:\r\n        # Read which tool to use and mat-filename from argument\t\r\n        " +
                    "modelica_tool = init_and_compile_test_bench(tool_name)\r\n        t_mat, t_post = " +
                    "execute_test_bench(modelica_tool, report_file)\r\n        # write statistics\r\n    " +
                    "    pym.write_out_tool_statistics(modelica_tool, t_mat, t_post, \r\n              " +
                    "                        os.path.join(\'..\', \'tool_stat.json\'))\r\n    except pym.Mo" +
                    "delicaError as err:\r\n        _exit_on_failure(\'{0} : {1}\'.format(err.message, er" +
                    "r.sp_msg))\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    try:\r\n        main()\r\n    except" +
                    " Exception as err:\r\n        try:\r\n            _exit_on_failure(\'{0} : {1}\'.forma" +
                    "t(err.message, \'(Not a caught ModelicaError)\'))\r\n        except Exception:\r\n    " +
                    "        sys.exit(13)  # Just in case something should fail in the exit function\r" +
                    "\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 175 "C:\Users\meta\Documents\META\src\CyPhy2Modelica_v2\Templates\simulate_py.tt"
 public string ToolName ="";
	public string DymolaHome = "";
    public string ResultMatFile = "";
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class simulate_pyBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
