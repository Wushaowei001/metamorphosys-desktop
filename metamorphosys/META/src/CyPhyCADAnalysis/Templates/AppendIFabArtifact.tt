<#@ template language="C#" #>
<#@ output extension=".py" #>

# Title:    AppendIFabArtifact.py
# Purpose:  Generate and append artifact nodes to a testbench_manifest.json file.
# Notes:	Autogenerated from CADAnalysis.tt template

import os
import sys
import json

if __name__ == '__main__':
    test_bench_name = '<#=TestBenchName#>'
    assembly_name = '<#=AssemblyName#>'  
    test_bench_name_cleaned = '<#=TestBenchName_Cleaned#>'    
        
    if not os.path.exists('testbench_manifest.json'):
        print 'File does not exist: testbench_manifest.json'
        sys.exit(1)

    file_SummaryJson = open('testbench_manifest.json',"r")
    dict_SummaryJsonRoot = json.load(file_SummaryJson)
    
    #clear existing Artifacts list
    if 'Artifacts' in dict_SummaryJsonRoot:
        tmp = dict_SummaryJsonRoot['Artifacts']
        tmp[:] = []

    list_artifact = list()
    list_artifact.append({'Tag':'STEP Assembly', 'Location':''.join(['AP203_E2_SEPERATE_PART_FILES/', assembly_name[:31], '_asm.stp'])})        # step
    list_artifact.append({'Tag':'Metrics', 'Location':''.join([test_bench_name_cleaned, '_metrics.xml'])})                                     # metrics
    list_artifact.append({'Tag':'Design Model', 'Location':''.join([test_bench_name, '.metadesign.json'])})                            # ddp
    list_artifact.append({'Tag':'BOM', 'Location':''.join([test_bench_name, '.bom.json'])})                                            # bom
    list_artifact.append({'Tag':'Component Manufacturing Models', 'Location':'manufacturing.manifest.json'})                                                # man
    dict_SummaryJsonRoot['Artifacts'] = list_artifact         
        
   
    fo = open('testbench_manifest.json', 'w')
    new_SummaryJson = json.dumps(dict_SummaryJsonRoot,indent=2)
    fo.write(new_SummaryJson)
    fo.close()

<#+
    public string TestBenchName {get; set;}
	public string AssemblyName {get; set;}
	public string TestBenchName_Cleaned {get; set;}
#>