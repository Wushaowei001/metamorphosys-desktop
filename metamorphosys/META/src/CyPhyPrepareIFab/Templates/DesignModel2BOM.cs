// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhyPrepareIFab.Templates
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    
    #line 1 "C:\Users\di\Desktop\Branches\Branch_Dev\src\CyPhyPrepareIFab\Templates\DesignModel2BOM.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class DesignModel2BOM : DesignModel2BOMBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write(" \r\n");
            this.Write(@"

# Title:    DesignModel2BOM.py
# Purpose:  Generates a bom.json file from a DDP metadesign.json file.
# Notes:	Autogenerated from DesignModel2BOM.tt template


import os
import sys
import json

def RecursivelyGetComponentInstances(dict_Container):
    list_ComponentInstances = []

    if ""Containers"" in dict_Container:
        for dict_NestedContainer in dict_Container[""Containers""]:
            list_NestedComponentInstances = RecursivelyGetComponentInstances(dict_NestedContainer)
            for dict_NestedComponentInstance in list_NestedComponentInstances:
                list_ComponentInstances.append(dict_NestedComponentInstance)

    if ""ComponentInstances"" in dict_Container:
        for dict_ComponentInstance in dict_Container[""ComponentInstances""]:
            list_ComponentInstances.append(dict_ComponentInstance)

    return list_ComponentInstances

class BOM:
    def __init__(self):
        self.Components = []
        self.Name = """"
        self.DesignID = """"

if __name__ == '__main__':
    path_DesignModel = '");
            
            #line 44 "C:\Users\di\Desktop\Branches\Branch_Dev\src\CyPhyPrepareIFab\Templates\DesignModel2BOM.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DDPFile));
            
            #line default
            #line hidden
            this.Write("\'\r\n    path_BOMOutput = \'");
            
            #line 45 "C:\Users\di\Desktop\Branches\Branch_Dev\src\CyPhyPrepareIFab\Templates\DesignModel2BOM.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BOMFile));
            
            #line default
            #line hidden
            this.Write("\'\r\n\r\n    file_DesignModel = open(path_DesignModel,\"r\")\r\n    dict_DesignModelRoot " +
                    "= json.load(file_DesignModel)\r\n\r\n    list_ComponentInstances = RecursivelyGetCom" +
                    "ponentInstances(dict_DesignModelRoot)\r\n\r\n    # Build a dictionary for all compon" +
                    "ents.\r\n    # The key is built from ID, Version, Revision\r\n    dict_BOM = dict()\r" +
                    "\n    for dict_ComponentInstance in list_ComponentInstances:\r\n        str_Instanc" +
                    "eName = str(dict_ComponentInstance[\"Name\"])\r\n        str_AVMID = str(dict_Compon" +
                    "entInstance[\"ComponentID\"])\r\n        str_Version = str(dict_ComponentInstance[\"C" +
                    "omponentVersion\"])\r\n        str_Revision = str(dict_ComponentInstance[\"Component" +
                    "Revision\"])\r\n\r\n        # Build primary key\r\n        str_Key = str_AVMID,str_Vers" +
                    "ion,str_Revision\r\n        if str_Key in dict_BOM:\r\n            dict_Value = dict" +
                    "_BOM[str_Key]\r\n            dict_Value[\"InstanceNames\"].append(str_InstanceName)\r" +
                    "\n            dict_Value[\"Frequency\"] += 1\r\n            dict_BOM[str_Key] = dict_" +
                    "Value\r\n        else:\r\n            dict_Value = dict()\r\n            dict_Value[\"I" +
                    "nstanceNames\"] = [str_InstanceName]\r\n            dict_Value[\"AVMID\"] = str_AVMID" +
                    "\r\n            dict_Value[\"Version\"] = str_Version\r\n            dict_Value[\"Revis" +
                    "ion\"] = str_Revision\r\n            dict_Value[\"Frequency\"] = 1\r\n            dict_" +
                    "BOM[str_Key] = dict_Value\r\n\r\n    bom = BOM()\r\n    bom.Name = dict_DesignModelRoo" +
                    "t[\"Name\"]\r\n    bom.DesignID = dict_DesignModelRoot[\"DesignID\"]\r\n    for k,v in d" +
                    "ict_BOM.items():\r\n        bom.Components.append(v)\r\n\r\n    fo = open(path_BOMOutp" +
                    "ut, \'w\')\r\n    json_BOM = json.dumps(bom.__dict__,indent=2)\r\n    fo.write(json_BO" +
                    "M)\r\n    fo.close()\r\n\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 89 "C:\Users\di\Desktop\Branches\Branch_Dev\src\CyPhyPrepareIFab\Templates\DesignModel2BOM.tt"

    public string DDPFile {get;set;}
	public string BOMFile {get;set;}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class DesignModel2BOMBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
