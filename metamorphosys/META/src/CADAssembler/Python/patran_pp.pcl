

FUNCTION Patran_PP(i_installPath, i_dir, i_filename, i_bdfPath, i_xdbPath)	
	STRING i_installPath[512]
    STRING i_filename[64]
	STRING i_bdfPath[262] 
	STRING i_xdbPath[262] 
	STRING i_dir[262]
	
	createProject (i_installPath, i_filename, i_dir, i_bdfPath, i_xdbPath)
	getAllPartsFactorMax("VM", i_filename // "_out")
	getAllPartsFactorMax("MP", i_filename // "_out")
	getAllPartsFactorMax("D", i_filename // "_out")


	getALLPlots(i_filename)

	closeProject()

END FUNCTION

$dbdir is absolute path to new project's desired directory
$bdf and xdb paths relative to dbdir
$bdfPath and xdbPath need proper file extensions of ".bdf" and ".xdb"
FUNCTION createProject (installPath, dbname, dbdir, bdfPath, xdbPath)
    STRING installPath[512]
    STRING dbname[64]
    STRING dbdir[262]
    STRING bdfPath[262]
    STRING xdbPath[262]
    GLOBAL REAL defWidth
    GLOBAL REAL defHeight
    defWidth = 18.427588
    defHeight = 8.0
    
    uil_file_close.go(  )
    uil_file_new.go( installPath // "\" // "template.db", dbdir // "\" // dbname // ".db" )
    set_current_dir( dbdir )
    nastran_input_import( bdfPath, "default_group", 11, @
        [TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE], @
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], @
        [-2000000000, -2000000000, -2000000000, -2000000000, -2000000000, -2000000000, -2000000000, -2000000000, 0, 0, 1000] )
    
    msc_dra_init_stream(  )
    msc_dra_add_param( "DATABASE", dbdir // dbname // ".db" )
    msc_dra_add_param( "JOBNAME", "" )
    msc_dra_add_param( "RESULTS FILE", xdbPath )
    msc_dra_add_param( "OBJECT", "Result Entities" )
    msc_dra_add_param( "ANALYSIS TYPE", "Structural" )
    msc_dra_add_param( "DIVISION TOLERANCE", "1.0E-8" )
    msc_dra_add_param( "NUMERICAL TOLERANCE", "1.0E-4" )
    msc_dra_add_param( "MODEL TOLERANCE", "0.0049999999" )
    msc_dra_add_param( "ROTATIONAL NODAL RESULTS", "OFF" )
    msc_dra_add_param( "STRESS/STRAIN INVARIANTS", "OFF" )
    msc_dra_add_param( "PRINCIPAL DIRECTIONS", "OFF" )
    msc_dra_add_param( "ELEMENT RESULTS POSITIONS", "Nodal       " )
    msc_dra_add_param( "TITLE DESCRIPTION", "ON" )
    msc_dra_finish_stream(  )
    analysis_import( "MSC.Nastran", "",  "Attach Results File No Job", xdbPath, TRUE )
    
    ga_viewport_location_set   ( "default_viewport", 0.0, 0.0, 1 )
    ga_viewport_size_set       ( "default_viewport", defWidth, defHeight, 1 )
    uil_primary_file.db_save(  )
END FUNCTION


FUNCTION attachResults(xdbPath)
    STRING xdbPath[262]
    
    analysis_import( "MSC.Nastran", "",  "Attach Results File No Job", xdbPath, TRUE )
    uil_primary_file.db_save(  )
END FUNCTION


$do not suggest with db files created on another machine
FUNCTION openProject(dbname)
    STRING dbname[128]
    GLOBAL REAL defWidth
    GLOBAL REAL defHeight
    defWidth = 18.427588
    defHeight = 8.0
    
    uil_file_close.go(  )
    uil_file_open.go(dbname)
END FUNCTION 


FUNCTION closeProject()
    uil_file_close.goquit()
END FUNCTION


$factor = "VM" (for von Mises), "MP" (for max principal), "D" (for displacement, translation)
$function gets the max factor value for a load case among the nodes listed in node_list
$use with getPartElemNodes' nodeList to find max value for a specific part for a load case
$returns max factor value
FUNCTION getFactorMax(factor, node_list, loadcaseID)
    STRING factor[4]
    STRING node_list[VIRTUAL]
    INTEGER loadcaseID
    INTEGER resultids(5)
    INTEGER   subids(virtual)
    INTEGER   nsub1
    INTEGER   result_ids(4), nlayers, layerids(VIRTUAL)
    STRING    layerlabels[80](VIRTUAL)
    INTEGER nres
    
    # Clear any previous results from the memory
    res_utl_clear_result()
    
    # Argument Initialization 
    INTEGER itr2
    INTEGER itr3
    REAL tmp
    REAL max
    STRING pName[32]
    STRING sName[32]
    INTEGER pID
    INTEGER sID
    max = 0
    
     # Gets the subcases
    res_utl_get_subcases(loadcaseID, nsub1, subids)
    
    FOR (itr2 = 1 TO SYS_ARRAY_HBOUND(subids, 1))
#		itr2 = 1
        
		IF (factor == "VM") THEN		
            pName = "Stress Invariants"
            sName = "Von Mises"
        ELSE IF (factor == "MP") THEN
            pName = "Stress Invariants"
            sName = "Major Principal"
        ELSE IF (factor == "D") THEN
            pName = "Displacements"
            sName = "Translational"
        END IF
        
		res_data_get_result_ids(pName, sName, pID, sID)
        
		# Gets the layer positions associated with the results
        result_ids(1) = loadcaseID
        result_ids(2) = subids(itr2)
        result_ids(3) = pID
        result_ids(4) = sID

        dump res_utl_get_result_layers(result_ids, nlayers, layerids, layerlabels)
		      	   
        FOR (itr3 = 1 TO SYS_ARRAY_HBOUND(layerids, 1))
			resultids(1) = result_ids(1)
			resultids(2) = result_ids(2)
			resultids(3) = result_ids(3)
			resultids(4) = result_ids(4)		
            resultids(5) = layerids(itr3)
			 
            tmp = getFactorMax2(factor, node_list, resultids)

            IF (tmp > max) THEN 
                max = tmp
            END IF
			
			
        END FOR
        
#        #Release virtual arrays
        SYS_FREE_ARRAY (layerids)
        SYS_FREE_ARRAY (layerlabels)
    END FOR
#    SYS_FREE_ARRAY (subids)
    
    RETURN max
END FUNCTION


$not meant for user to call
$same as getFactorMax2 except for a specific subcase of a load
$resultids(1) is load case id
$resultids(2) is sub case id
$resultid(3) is primary result id (getFactorIDs is relevant)
$resultid (4) is secondary result id (getFactorIDs is relevant)
$returns max factor value

FUNCTION getFactorMax2(factor, node_list, resultids)
    STRING factor[4]
    STRING node_list[]
    INTEGER resultids(5)
    STRING derivation[10]
    IF (factor == "VM") THEN
        derivation = ""
    ELSE IF (factor == "MP") THEN
        derivation = ""
    ELSE IF (factor == "D") THEN
        derivation = "MAG"
    END IF
    
    INTEGER data_type
    INTEGER nres
    INTEGER ids(VIRTUAL)
    REAL results(VIRTUAL)
    INTEGER minloc(6)
    INTEGER maxloc(6)
    
    res_utl_extract_nodal_results2(resultids, node_list, derivation, "", "DeriveAverage", "All", "ShapeFunc", "", 0., data_type, nres, ids, results, minloc,maxloc)
	
#	IF (maxloc(1) != 0) THEN
		RETURN results(maxloc(1))
#	ELSE  RETURN 0
END FUNCTION

$factor = "VM" (for von Mises), "MP" (for max principal), "D" (for displacement, translation)
$if filename is empty string, no file output created
$prints to Patran console (and file filename.txt) max value of each part for each load case
FUNCTION getAllPartsFactorMax(factor, filename)
    STRING factor[4]
    STRING filename[32]
    INTEGER partIDs(VIRTUAL)
    INTEGER   nrc, lcids(virtual), nsub(virtual)
    INTEGER itr
    INTEGER itr2
    STRING   s_title[80]
    
    INTEGER file
    REAL temp
    STRING out[VIRTUAL]
    
    getAllPartIDs(partIDs)
    res_utl_get_loadcases(nrc, lcids, nsub)
    
    dump factor
    IF (filename != "") THEN
        text_open( filename//".txt", "NOWA", 0, 0, file )
#        text_write_string ( file, factor )
    END IF
    
    FOR (itr = 1 TO nrc)
        db_get_load_case_title(lcids(itr), s_title)
 #       dump s_title
        IF (filename != "") THEN
#            text_write_string ( file, s_title)
        END IF
        FOR (itr2 = 1 TO SYS_ARRAY_HBOUND(partIDs, 1))
			STRING elemList[VIRTUAL]
			STRING nodeList[VIRTUAL]
			dump partIDs(itr2)		
			getPartElemNodes(partIDs(itr2), elemList, nodeList)
#			dump elemList nodelist
            temp =  getFactorMax(factor, nodeList, lcids(itr))           
            dump temp
            IF (filename != "") THEN
#                string_write( getPartName(partIDs(itr2)) // " : %F%", 0, temp, "", out )
				out = factor // "," // s_title // "," //getPartName(partIDs(itr2)) // ","//str_from_real(temp)
                text_write_string ( file, out)
            END IF
            
            SYS_FREE_STRING (elemList)
            SYS_FREE_STRING (nodeList)
        END FOR
    END FOR
    
    SYS_FREE_ARRAY (partIDs)
    SYS_FREE_ARRAY (lcids)
    IF (filename != "") THEN
#        text_write_string ( file, " ")
        text_close( file, " ")
    END IF
END FUNCTION


$ fringe = "VM" (for von Mises), "MP" (for max principal), "D" (for displacement, translation), or "" (for no fringe plot)
$ deform = "D" (for displacement, translation), or "" (for no displacement plot)
FUNCTION createPlot(loadcase, subcase, fringe, deform)
    STRING fringe[4]
    STRING deform[4]
    STRING loadcase[VIRTUAL]
    STRING subcase[VIRTUAL]
    
    $ deleting plots
    res_display_anim_clear( )
    res_display_tool_delete( "Fringe", "default_Fringe" )
    res_display_tool_delete( "Deformation", "default_Deformation" )
    
    $ fringe
    IF (fringe == "VM" || fringe == "MP" || fringe == "D") THEN
        $ von mises
        IF (fringe == "VM") THEN 
			res_utl_clear_result()
            res_data_load_dbresult( 0, "Nodal", "Scalar", loadcase, subcase,  @
                "Stress Invariants", "Von Mises", "(NON-LAYERED)", "", "AsIs", "DeriveAverage" @
                , "All", "ShapeFunc")
        $ major principal
        ELSE IF (fringe == "MP") THEN
			res_utl_clear_result()
            res_data_load_dbresult( 0, "Nodal", "Scalar", loadcase, subcase,  @
                "Stress Invariants", "Major Principal", "(NON-LAYERED)", "", "AsIs",  @
                "DeriveAverage", "All", "ShapeFunc")
        $ fringe displacements
        ELSE IF (fringe == "D") THEN
			res_utl_clear_result()
            res_data_load_dbresult( 0, "Nodal", "Scalar", loadcase, subcase,  @
                "Displacements", "Translational", "(NON-LAYERED)", "MAG", "AsIs", "", "", "",  @
                "", 0. )
        END IF
        
        res_data_title( 0, "Nodal", "Scalar", 1, [ @
            "$POFF@@@$PT: @@@$LCN, @@@$SCN, @@@$PRN, @@@$SRN, @@@$DRVL, @@@$LN"] )
        res_display_fringe_create( "", "FreeFaces", 0, [""], 12, [ @
            "Range:Fri_default_Fringe", "RangeOverwrite:ON", "FringeStyle:Discrete/Smooth" @
            , "Shade:None", "ElemEdge:FreeEdge,Blue,Solid,1", "Shrink:0",  @
            "TitleDisplay:ON", "MinMaxDisplay:ON", "ValueDisplay:OFF", "Filter:None",  @
            "ScaleFactor:1.", "LabelStyle:Exponential, 12, White, 3"], TRUE )
        res_display_fringe_post( "", 0, "Nodal", TRUE, TRUE )
    END IF
    
    $ displacement, along with previous fringe
    IF (deform == "D") THEN
		res_utl_clear_result()
        res_data_load_dbresult( 0, "Nodal", "Vector", loadcase, subcase,  @
            "Displacements", "Translational", "(NON-LAYERED)", "", "AsIs", "", "", "", "", @
            0. )
        res_data_title( 0, "Nodal", "Vector", 1, [ @
            "$POFF@@@$PT: @@@$LCN, @@@$SCN, @@@$PRN, @@@$SRN, @@@$DRVL, @@@$LN"] )
        res_display_deformation_create( "", "Elements", 0, [""], 9, [ @
            "DeformedStyle:White,Solid,1,Wireframe", "DeformedScale:Model=0.1",  @
            "UndeformedStyle:OFF,Blue,Solid,1,Wireframe", "TitleDisplay:ON",  @
            "MinMaxDisplay:ON", "ScaleFactor:1.", "LabelStyle:Exponential, 12, White, 3",  @
            "DeformDisplay:Resultant", "DeformComps:OFF,OFF,OFF"] )
        res_display_deformation_post( "", 0 )
    END IF
END FUNCTION


$ filename without file extension
$ generates png files
FUNCTION saveImage(fname)
    STRING fname[virtual]
    GLOBAL REAL defWidth
    GLOBAL REAL defHeight
    
#    res_display_anim_clear( )
    ga_viewport_size_set( "default_viewport", defWidth, defHeight, 1 )
    
    ga_view_aa_set( 0., 0., 0. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_front" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
    
    ga_view_aa_set( 0., 180., 0. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_rear" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
    
    ga_view_aa_set( 90., 0., 0. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_top" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
    
    ga_view_aa_set( -90., 0., 0. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_bottom" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
    
    ga_view_aa_set( 180., 90., 180. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_left" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
    
    ga_view_aa_set( 180., -90., 180. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_right" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
    
    ga_view_aa_set( 23., -34., 0. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_iso_1" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
    
    ga_view_aa_set( 23., 56., 0. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_iso_2" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
    
    ga_view_aa_set( -67., 0., -34. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_iso_3" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
    
    ga_view_aa_set( 157., 34, -180. )
    gu_fit_view(  )
    gm_write_image( "PNG", fname // "_iso_4" // ".png", "Overwrite", 0., 0., 1., 1., 0, "Viewport" )
END FUNCTION


$ frames is number per take (one play from start to finish)
$ playRepeat is number of takes (number of start to finish plays in a row)
$ delay is milliseconds between frames
$ reasonable values: frames = 10, playRepeat = 3, delay = 10
$ generates mpeg file
FUNCTION createAnimation(filename, frames, playRepeat, delay)
    STRING filename[64]
    INTEGER frames
    INTEGER playRepeat
    INTEGER delay
    INTEGER endAnim
    
    res_display_anim_clear( )
    set_cur_win4msmpeg(  )
    gu_fit_view(  )
    
    res_display_tool_animate_scale( "Modal", "Fringe", "default_Fringe", 1.4141999 )
    res_display_anim_setup_2d( frames, "Linear", "./animations" )
    res_display_tool_animate_scale( "Modal", "Deformation", "default_Deformation", 1.4141999 )
    res_display_anim_setup_2d( frames, "Linear", "./animations" )
    res_display_anim_run( delay )
    endAnim = gm_mpeg_start_recording( "./" // filename // ".mpg", "Overwrite", @
        0., 0., 1., 1., 90,  frames * playRepeat)
END FUNCTION

FUNCTION getALLPlots(filename)

	INTEGER frames = 10, playTimes = 3, delay = 10	
	INTEGER a,b,c
	STRING f[4]
	STRING filename[VIRTUAL]
	INTEGER   nrc, lcids(virtual), nsub(virtual)
	STRING   l_title[64]
	STRING   sub_title[64]

	res_utl_get_loadcases(nrc, lcids, nsub)
	
	FOR (a = 1 TO nrc)
		FOR (b = 1 TO nsub(a))
			db_get_load_case_title(lcids(a), l_title)
			db_get_sub_case_title(lcids(a), b, sub_title)
#			LIST (f = "VM", "MP", "D")
			LIST (f = "VM", "D")
				dump l_title 
				dump sub_title 
				dump f	 
				createPlot(l_title, sub_title, f, "")			
				saveImage(filename // "_" // f)
#				createAnimation(filename // "_" // f, frames, playTimes, delay)
				
				IF (f == "D") THEN
					createPlot(l_title, sub_title, f, "D")
					saveImage(filename // "_" // f // "_" // "D")
#					createAnimation(filename // "_" // f //  "_" // "D", frames, playTimes, delay)
				END IF
				
			END LIST
		END FOR		
	END FOR

END FUNCTION
$---------------------------------------------------------------------------------------------------------------------------
$Rest of the functions: accessing database info ex. getting parts nodes and elements, names of all load cases, getting subcase id, etc
$---------------------------------------------------------------------------------------------------------------------------

$returns array of all load case names
FUNCTION getAllLoadCases(lcnames)
    INTEGER ncases
    INTEGER lcids(VIRTUAL)
    INTEGER nsub(VIRTUAL)
    STRING lcnames[80](VIRTUAL)
    INTEGER i
    res_utl_get_loadcases(ncases, lcids, nsub)
    
    SYS_ALLOCATE_ARRAY(lcnames, 1, ncases)
    FOR (i = 1 TO ncases)
        db_get_load_case_title(lcids(i), lcnames(i))
    END FOR
    RETURN lcnames
END FUNCTION

$returns load case id
FUNCTION getLoadCaseID(loadcase)
    STRING loadcase[80]
    INTEGER loadID
    db_get_load_case_id(loadcase, loadID)
    RETURN loadID
END FUNCTION

$returns list of all subcase names of a load case
FUNCTION getAllSubCases(loadcase)
    STRING loadcase[80]
    INTEGER nsub
    INTEGER subids(VIRTUAL)
    STRING subnames[31](VIRTUAL)
    INTEGER i
    res_utl_get_subcases(getLoadCaseID(loadcase), nsub, subids)
    
    SYS_ALLOCATE_ARRAY(subnames, 1, nsub)
    FOR (i = 1 TO nsub)
        db_get_sub_case_title(getLoadCaseID(loadcase), subids(i), subnames(i))
    END FOR
    RETURN subnames
END FUNCTION

$returns subcase id
FUNCTION getSubCaseID(loadcase, subcase)
    STRING loadcase[80]
    STRING subcase[31]
    INTEGER subid
    db_get_sub_case_id(getLoadCaseID(loadcase), subcase, subid)
    RETURN subid
END FUNCTION    

$returns list of all layer names of a subcase of a load case
FUNCTION getAllLayers(loadcase, subcase, factor)
    STRING loadcase[80]
    STRING subcase[31]
    STRING factor[4]
    INTEGER result_ids(4)
    INTEGER primaryID
    INTEGER secondaryID
    INTEGER   nlayers, layerids(VIRTUAL)
    STRING    layerlabels[80](VIRTUAL)
    
    result_ids(1) = getLoadCaseID(loadcase)
    result_ids(2) = getSubCaseID(loadcase, subcase)
    getFactorIDs(factor, primaryID, secondaryID)
    result_ids(3) = primaryID
    result_ids(4) = secondaryID
    res_utl_get_result_layers(result_ids, nlayers, layerids, layerlabels)
    RETURN layerlabels
END FUNCTION

$returns layer id
FUNCTION getLayerID(loadcase, subcase, factor, layer)
    STRING loadcase[80]
    STRING subcase[31]
    STRING factor[4]
    STRING layer[80]
    INTEGER result_ids(4)
    INTEGER primaryID
    INTEGER secondaryID
    INTEGER   nlayers, layerids(VIRTUAL)
    STRING    layerlabels[80](VIRTUAL)
    INTEGER i
    
    result_ids(1) = getLoadCaseID(loadcase)
    result_ids(2) = getSubCaseID(loadcase, subcase)
    getFactorIDs(factor, primaryID, secondaryID)
    result_ids(3) = primaryID
    result_ids(4) = secondaryID
    res_utl_get_result_layers(result_ids, nlayers, layerids, layerlabels)
    
    FOR (i=1 TO nlayers)
        IF (layerlabels(i) == layer) THEN
            RETURN layerids(i)
        END IF
    END FOR
    
    RETURN 0
END FUNCTION


$ assign primaryID and secondaryID values
FUNCTION getFactorIDs(factor, primaryID, secondaryID)
    STRING factor[4]
    INTEGER primaryID
    INTEGER secondaryID
    
    IF (factor == "VM") THEN 
        db_get_primary_res_id("Stress Invariants", primaryID)
        db_get_secondary_res_id(primaryID,"Von Mises", secondaryID)
    ELSE IF (factor == "MP") THEN
        db_get_primary_res_id("Stress Invariants", primaryID)
        db_get_secondary_res_id(primaryID,"Major Principal", secondaryID)
    ELSE IF (factor == "D") THEN
        db_get_primary_res_id("Displacements", primaryID)
        db_get_secondary_res_id(primaryID,"Translational", secondaryID)
    ELSE
        primaryID = 0
        secondaryID = 0
    END IF
END FUNCTION

$ returns list of part ids (ie regions/property sets) in model
FUNCTION getAllPartIDs(ids)
    INTEGER num
    INTEGER ids(VIRTUAL)
    
    db_count_region_ids(num)
	SYS_ALLOCATE_ARRAY (ids, 1, num)
    db_get_all_region_ids(num, ids)
#    RETURN ids
END FUNCTION


$ assign elemList and nodeList strings values describing all elements and nodes of a part (ie region/property set)
FUNCTION getPartElemNodes(ID, elemList, nodeList)
    INTEGER ID
    STRING set_name[32]
    INTEGER gener_elem_type
    INTEGER dof_set_flag 
    INTEGER condense_flag
    INTEGER geom_flag
    INTEGER form_flag 
    INTEGER lam_flag 
    INTEGER layer_count
    INTEGER material_id
    INTEGER material_lin 
    INTEGER material_dir
    STRING   properties_list[32](1)
    STRING elemList[VIRTUAL]
    STRING nodeList[VIRTUAL]
    
    db_get_region_definition(ID, set_name, gener_elem_type, @
        dof_set_flag, condense_flag, geom_flag, @
        form_flag, lam_flag, layer_count, material_id, @
        material_lin, material_dir)
        
    properties_list(1) = set_name
    list_create_elem_att_prop( 0, properties_list, 1, "lista", elemList)
    list_create_node_ass_elem( elemList, "listb", nodeList)
END FUNCTION

$ returns part's (ie region/property set) name
FUNCTION getPartName(partID)
    INTEGER partID
    STRING set_name[32]
    INTEGER gener_elem_type
    INTEGER dof_set_flag
    INTEGER condense_flag
    INTEGER geom_flag
    INTEGER form_flag
    INTEGER lam_flag
    INTEGER layer_count
    INTEGER material_id
    INTEGER material_lin
    INTEGER material_dir

    db_get_region_definition(partID,  set_name, gener_elem_type, dof_set_flag, condense_flag, geom_flag, form_flag, lam_flag, layer_count, material_id, material_lin, material_dir)
    RETURN set_name
END FUNCTION
