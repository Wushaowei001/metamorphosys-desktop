"""

AbaqusParse.py

For use with Abaqus 6.13-1 (Python 2.6.2).

Created by Ozgur Yapar <oyapar@isis.vanderbilt.edu>
           Robert Boyles <rboyles@isis.vanderbilt.edu>

    - Includes modules which parse the XML files generated by CyPhy
      and Create Assembly program to get the essential data which
      contains user inputs and CAD data.

"""

import os
import xml.etree.ElementTree as ET
import logging
import cad_library
from abaqus import *
from abaqusConstants import *


def parseCADAssemblyXML(xmlName, resultsDir, args):
    """ Parse assembly definition file. """
    logger = logging.getLogger()
    logger.info("XML parser is obtaining necessary data from CyPhy assembly XML \n")
    xmlPath = os.path.join(resultsDir, xmlName)
 
    try:
        tree = ET.parse(xmlPath)
        xmlRoot = tree.getroot()
    except IOError:
        # Input/Output Error occurs if file does not exist or the XML is malformed.
        cad_library.exitwitherror('Cannot parse ' + xmlName + '.', -1, 'AbaqusParse.py')
    
    assemblyXML = xmlRoot.find('Assembly')
    if assemblyXML is None:
        cad_library.exitwitherror('Cannot find the block /"Assembly/" in ' + xmlName + '.', -1, 'AbaqusParse.py')
        
    analysesXML = assemblyXML.find('Analyses')
    if analysesXML is None:
        cad_library.exitwitherror('Cannot find the block /"Analyses/" in ' + xmlName + '.', -1, 'AbaqusParse.py')

    cadAssemblyXML = assemblyXML.find('CADComponent')
    if cadAssemblyXML is None:
        cad_library.exitwitherror('Cannot find the block /"CADComponent/" in ' + xmlName + '.', -1, 'AbaqusParse.py')
        
    feaXML = analysesXML.find('FEA')
    if feaXML is None:
        cad_library.exitwitherror('Cannot find the block /"FEA/" in ' + xmlName + '.', -1, 'AbaqusParse.py')
    
    # Determine if a thermal analysis is to be included.
    thermalSetXML = feaXML.find('ThermalElements')

    try:
        maxNumberIter = int(feaXML.get("MaxAdaptiveIterations"))
        if maxNumberIter > 10:
            maxNumberIter = 10
            logger.info('MaxIterations greater than maximum of 10. Setting MaxIterations to 10. \n')
        elif maxNumberIter <= 0:
            maxNumberIter = 1
            logger.info('MaxIterations less than minimum of 0. Setting MaxIterations to 1. \n')
    except AttributeError:
        cad_library.exitwitherror('Error in reading maximum number of iterations from '
                                  + xmlName + '.', -1, 'AbaqusParse.py')
    
    analysisConstraintSetXML = None
    if not args.meshOnly:
        analysisConstraintsXML = feaXML.find('AnalysisConstraints')
        # If None, could be a thermal only analysis
        if analysisConstraintsXML is not None:
            analysisConstraintSetXML = analysisConstraintsXML.getiterator('AnalysisConstraint')
    logger.info('Successfully parsed all required data from ' + xmlName + '. \n')
    logger.info("**********************************************************************************" + '\n')
    
    return feaXML, cadAssemblyXML, maxNumberIter, analysisConstraintSetXML, thermalSetXML
            

def parseStep(cadAssemblyXMLTree, stepDir):
    """ Parse STEP file. """
    logger = logging.getLogger()
    logger.info("Defining the path for the STEP file" + '\n')
    try:
        testBenchName = cadAssemblyXMLTree.get("Name")
        stepName = testBenchName + '_asm.stp'
        stepPath = os.path.join(stepDir, stepName)
        step = mdb.openStep(fileName=stepPath)
    except TypeError:
        cad_library.exitwitherror('Error finding top level assembly STEP file.', -1, 'AbaqusParse.py')
    except Texterror:
        cad_library.exitwitherror('Error opening the step file.', -1, 'AbaqusParse.py')

    logger.info("Opening the STEP file " + str(stepName) + ' and converting it into raw data' + '\n')
    logger.info("**********************************************************************************" + '\n')

    return stepPath, testBenchName, step
            
            
def parseKinComputedValuesXML(kinComputedValuesXML):
    """ Parse kinematic result XML (for Adams-to-Abaqus SOT runs only). """
    logger = logging.getLogger()
    logger.info("XML parser is obtaining necessary data from Adams" + '\n')
    xmlCompPath = os.path.join(os.getcwd(), kinComputedValuesXML)

    try:
        treeComp = ET.parse(xmlCompPath)
        xmlCompRoot = treeComp.getroot()
    except IOError:
        cad_library.exitwitherror('Unable to find ' + kinComputedValuesXML + '.', -1, 'AbaqusParse.py')
    except AttributeError:
        cad_library.exitwitherror('Cannot parse ' + kinComputedValuesXML + '.', -1, 'AbaqusParse.py')

    try:
        ComputedComponentXML = xmlCompRoot.findall('Component')
    except AttributeError:
        cad_library.exitwitherror('Cannot find \"Components\" block inside the '
                                  + kinComputedValuesXML + ' file.', -1, 'AbaqusParse.py')

    try:
        for element in ComputedComponentXML:
            compMetrics = element.find('Metrics')
            compMetric = compMetrics.find('Metric')
            try:
                compMetricID = compMetric.get('MetricID')
            except AttributeError:
                continue
            if compMetricID == 'Anchor':
                anchorID = element.get('ComponentInstanceID')
                anchorPoint = compMetric.get('ArrayValue')
    except AttributeError:
        cad_library.exitwitherror('Cannot find anchored part name inside the '
                                  + kinComputedValuesXML + ' file.', -1, 'AbaqusParse.py')

    logger.info('Successfully parsed all required data from ' + kinComputedValuesXML + '. \n')
    logger.info("**********************************************************************************" + '\n')

    return anchorID, anchorPoint


def parseInpTemp(inpTempFile):
    """ Determine upto which point the temporary INP file needs to be merged with the final INP file. """
    m = 1
    for eachLine in inpTempFile:               # Loop through each line of the temporary INP file
        loadData = eachLine.split()            # Split each line to thier words
        try:
            if loadData[1] == 'STEP:':         # If the second word in that line is STEP:
                stopLine = m-1                 # Store the number of the previous line as the stopLine
        except IndexError:
            pass
        m += 1

    return stopLine   


def parseLOD(lodFile):
    """ Determine from which point the LOD file generated by Adams needs to be merged with the final INP file. """
    j = 1
    for eachLine in lodFile:                  # Loop through each line of the LOD file
        loadData = eachLine.split()           # Split each line to thier words
        try:
            if loadData[2] == 'CASE':         # If the third word in that line is CASE
                startLine = j                 # Store the number of that line as the startLine
                break
        except IndexError:
            pass
        j += 1

    return startLine    
    
    
def parseRequestedMetrics(path):
    """ Parse XML file which maps desired metric outputs to component instance. """
    try:
        tree = ET.parse(path)
        xmlRoot = tree.getroot()
    except IOError:
        cad_library.exitwitherror('Cannot find RequestedMetrics.xml.', -1, 'AbaqusParse.py')
    except AttributeError:
        cad_library.exitwitherror('Cannot parse RequestedMetrics.xml.', -1, 'AbaqusParse.py')
    
    try:
        metrics = xmlRoot.findall('Metric')
    except AttributeError:
        cad_library.exitwitherror('Cannot find the blocks /"Metric/" in '
                                  'RequestedMetrics.xml.', -1, 'AbaqusParse.py')
    return metrics