// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ComputeMetricsXML.hxx"

// CADIncrementParameterType
// 

const CADIncrementParameterType::Units_optional& CADIncrementParameterType::
Units () const
{
  return this->Units_;
}

CADIncrementParameterType::Units_optional& CADIncrementParameterType::
Units ()
{
  return this->Units_;
}

void CADIncrementParameterType::
Units (const Units_type& x)
{
  this->Units_.set (x);
}

void CADIncrementParameterType::
Units (const Units_optional& x)
{
  this->Units_ = x;
}

void CADIncrementParameterType::
Units (::std::auto_ptr< Units_type > x)
{
  this->Units_.set (x);
}

const CADIncrementParameterType::Type_type& CADIncrementParameterType::
Type () const
{
  return this->Type_.get ();
}

CADIncrementParameterType::Type_type& CADIncrementParameterType::
Type ()
{
  return this->Type_.get ();
}

void CADIncrementParameterType::
Type (const Type_type& x)
{
  this->Type_.set (x);
}

void CADIncrementParameterType::
Type (::std::auto_ptr< Type_type > x)
{
  this->Type_.set (x);
}

const CADIncrementParameterType::Name_type& CADIncrementParameterType::
Name () const
{
  return this->Name_.get ();
}

CADIncrementParameterType::Name_type& CADIncrementParameterType::
Name ()
{
  return this->Name_.get ();
}

void CADIncrementParameterType::
Name (const Name_type& x)
{
  this->Name_.set (x);
}

void CADIncrementParameterType::
Name (::std::auto_ptr< Name_type > x)
{
  this->Name_.set (x);
}

const CADIncrementParameterType::StartValue_type& CADIncrementParameterType::
StartValue () const
{
  return this->StartValue_.get ();
}

CADIncrementParameterType::StartValue_type& CADIncrementParameterType::
StartValue ()
{
  return this->StartValue_.get ();
}

void CADIncrementParameterType::
StartValue (const StartValue_type& x)
{
  this->StartValue_.set (x);
}

void CADIncrementParameterType::
StartValue (::std::auto_ptr< StartValue_type > x)
{
  this->StartValue_.set (x);
}

const CADIncrementParameterType::EndValue_type& CADIncrementParameterType::
EndValue () const
{
  return this->EndValue_.get ();
}

CADIncrementParameterType::EndValue_type& CADIncrementParameterType::
EndValue ()
{
  return this->EndValue_.get ();
}

void CADIncrementParameterType::
EndValue (const EndValue_type& x)
{
  this->EndValue_.set (x);
}

void CADIncrementParameterType::
EndValue (::std::auto_ptr< EndValue_type > x)
{
  this->EndValue_.set (x);
}

const CADIncrementParameterType::Increment_type& CADIncrementParameterType::
Increment () const
{
  return this->Increment_.get ();
}

CADIncrementParameterType::Increment_type& CADIncrementParameterType::
Increment ()
{
  return this->Increment_.get ();
}

void CADIncrementParameterType::
Increment (const Increment_type& x)
{
  this->Increment_.set (x);
}

void CADIncrementParameterType::
Increment (::std::auto_ptr< Increment_type > x)
{
  this->Increment_.set (x);
}


// CADReadParameterType
// 

const CADReadParameterType::Owner_type& CADReadParameterType::
Owner () const
{
  return this->Owner_.get ();
}

CADReadParameterType::Owner_type& CADReadParameterType::
Owner ()
{
  return this->Owner_.get ();
}

void CADReadParameterType::
Owner (const Owner_type& x)
{
  this->Owner_.set (x);
}

void CADReadParameterType::
Owner (::std::auto_ptr< Owner_type > x)
{
  this->Owner_.set (x);
}

const CADReadParameterType::Name_type& CADReadParameterType::
Name () const
{
  return this->Name_.get ();
}

CADReadParameterType::Name_type& CADReadParameterType::
Name ()
{
  return this->Name_.get ();
}

void CADReadParameterType::
Name (const Name_type& x)
{
  this->Name_.set (x);
}

void CADReadParameterType::
Name (::std::auto_ptr< Name_type > x)
{
  this->Name_.set (x);
}


// IncrementType
// 

const IncrementType::CADIncrementParameter_sequence& IncrementType::
CADIncrementParameter () const
{
  return this->CADIncrementParameter_;
}

IncrementType::CADIncrementParameter_sequence& IncrementType::
CADIncrementParameter ()
{
  return this->CADIncrementParameter_;
}

void IncrementType::
CADIncrementParameter (const CADIncrementParameter_sequence& s)
{
  this->CADIncrementParameter_ = s;
}


// ReadType
// 

const ReadType::CADReadParameter_sequence& ReadType::
CADReadParameter () const
{
  return this->CADReadParameter_;
}

ReadType::CADReadParameter_sequence& ReadType::
CADReadParameter ()
{
  return this->CADReadParameter_;
}

void ReadType::
CADReadParameter (const CADReadParameter_sequence& s)
{
  this->CADReadParameter_ = s;
}


// ParametricParametersType
// 

const ParametricParametersType::Increment_optional& ParametricParametersType::
Increment () const
{
  return this->Increment_;
}

ParametricParametersType::Increment_optional& ParametricParametersType::
Increment ()
{
  return this->Increment_;
}

void ParametricParametersType::
Increment (const Increment_type& x)
{
  this->Increment_.set (x);
}

void ParametricParametersType::
Increment (const Increment_optional& x)
{
  this->Increment_ = x;
}

void ParametricParametersType::
Increment (::std::auto_ptr< Increment_type > x)
{
  this->Increment_.set (x);
}

const ParametricParametersType::Read_optional& ParametricParametersType::
Read () const
{
  return this->Read_;
}

ParametricParametersType::Read_optional& ParametricParametersType::
Read ()
{
  return this->Read_;
}

void ParametricParametersType::
Read (const Read_type& x)
{
  this->Read_.set (x);
}

void ParametricParametersType::
Read (const Read_optional& x)
{
  this->Read_ = x;
}

void ParametricParametersType::
Read (::std::auto_ptr< Read_type > x)
{
  this->Read_.set (x);
}


// UnitsType
// 

const UnitsType::Value_type& UnitsType::
Value () const
{
  return this->Value_.get ();
}

UnitsType::Value_type& UnitsType::
Value ()
{
  return this->Value_.get ();
}

void UnitsType::
Value (const Value_type& x)
{
  this->Value_.set (x);
}

void UnitsType::
Value (::std::auto_ptr< Value_type > x)
{
  this->Value_.set (x);
}


// CADComponentType
// 

const CADComponentType::ParametricParameters_optional& CADComponentType::
ParametricParameters () const
{
  return this->ParametricParameters_;
}

CADComponentType::ParametricParameters_optional& CADComponentType::
ParametricParameters ()
{
  return this->ParametricParameters_;
}

void CADComponentType::
ParametricParameters (const ParametricParameters_type& x)
{
  this->ParametricParameters_.set (x);
}

void CADComponentType::
ParametricParameters (const ParametricParameters_optional& x)
{
  this->ParametricParameters_ = x;
}

void CADComponentType::
ParametricParameters (::std::auto_ptr< ParametricParameters_type > x)
{
  this->ParametricParameters_.set (x);
}

const CADComponentType::Name_type& CADComponentType::
Name () const
{
  return this->Name_.get ();
}

CADComponentType::Name_type& CADComponentType::
Name ()
{
  return this->Name_.get ();
}

void CADComponentType::
Name (const Name_type& x)
{
  this->Name_.set (x);
}

void CADComponentType::
Name (::std::auto_ptr< Name_type > x)
{
  this->Name_.set (x);
}

const CADComponentType::Type_type& CADComponentType::
Type () const
{
  return this->Type_.get ();
}

CADComponentType::Type_type& CADComponentType::
Type ()
{
  return this->Type_.get ();
}

void CADComponentType::
Type (const Type_type& x)
{
  this->Type_.set (x);
}

void CADComponentType::
Type (::std::auto_ptr< Type_type > x)
{
  this->Type_.set (x);
}

const CADComponentType::MetricsOutputFile_type& CADComponentType::
MetricsOutputFile () const
{
  return this->MetricsOutputFile_.get ();
}

CADComponentType::MetricsOutputFile_type& CADComponentType::
MetricsOutputFile ()
{
  return this->MetricsOutputFile_.get ();
}

void CADComponentType::
MetricsOutputFile (const MetricsOutputFile_type& x)
{
  this->MetricsOutputFile_.set (x);
}

void CADComponentType::
MetricsOutputFile (::std::auto_ptr< MetricsOutputFile_type > x)
{
  this->MetricsOutputFile_.set (x);
}


// CADComponentsType
// 

const CADComponentsType::CADComponent_sequence& CADComponentsType::
CADComponent () const
{
  return this->CADComponent_;
}

CADComponentsType::CADComponent_sequence& CADComponentsType::
CADComponent ()
{
  return this->CADComponent_;
}

void CADComponentsType::
CADComponent (const CADComponent_sequence& s)
{
  this->CADComponent_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// CADIncrementParameterType
//

CADIncrementParameterType::
CADIncrementParameterType (const Type_type& Type,
                           const Name_type& Name,
                           const StartValue_type& StartValue,
                           const EndValue_type& EndValue,
                           const Increment_type& Increment)
: ::xml_schema::type (),
  Units_ (::xml_schema::flags (), this),
  Type_ (Type, ::xml_schema::flags (), this),
  Name_ (Name, ::xml_schema::flags (), this),
  StartValue_ (StartValue, ::xml_schema::flags (), this),
  EndValue_ (EndValue, ::xml_schema::flags (), this),
  Increment_ (Increment, ::xml_schema::flags (), this)
{
}

CADIncrementParameterType::
CADIncrementParameterType (const CADIncrementParameterType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Units_ (x.Units_, f, this),
  Type_ (x.Type_, f, this),
  Name_ (x.Name_, f, this),
  StartValue_ (x.StartValue_, f, this),
  EndValue_ (x.EndValue_, f, this),
  Increment_ (x.Increment_, f, this)
{
}

CADIncrementParameterType::
CADIncrementParameterType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Units_ (f, this),
  Type_ (f, this),
  Name_ (f, this),
  StartValue_ (f, this),
  EndValue_ (f, this),
  Increment_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void CADIncrementParameterType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Units
    //
    if (n.name () == "Units" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Units_type > r (
        Units_traits::create (i, f, this));

      if (!this->Units_)
      {
        this->Units_.set (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "Type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Type_type > r (
        Type_traits::create (i, f, this));

      this->Type_.set (r);
      continue;
    }

    if (n.name () == "Name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Name_type > r (
        Name_traits::create (i, f, this));

      this->Name_.set (r);
      continue;
    }

    if (n.name () == "StartValue" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< StartValue_type > r (
        StartValue_traits::create (i, f, this));

      this->StartValue_.set (r);
      continue;
    }

    if (n.name () == "EndValue" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< EndValue_type > r (
        EndValue_traits::create (i, f, this));

      this->EndValue_.set (r);
      continue;
    }

    if (n.name () == "Increment" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Increment_type > r (
        Increment_traits::create (i, f, this));

      this->Increment_.set (r);
      continue;
    }
  }

  if (!Type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Type",
      "");
  }

  if (!Name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Name",
      "");
  }

  if (!StartValue_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "StartValue",
      "");
  }

  if (!EndValue_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "EndValue",
      "");
  }

  if (!Increment_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Increment",
      "");
  }
}

CADIncrementParameterType* CADIncrementParameterType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CADIncrementParameterType (*this, f, c);
}

CADIncrementParameterType::
~CADIncrementParameterType ()
{
}

// CADReadParameterType
//

CADReadParameterType::
CADReadParameterType (const Owner_type& Owner,
                      const Name_type& Name)
: ::xml_schema::type (),
  Owner_ (Owner, ::xml_schema::flags (), this),
  Name_ (Name, ::xml_schema::flags (), this)
{
}

CADReadParameterType::
CADReadParameterType (const CADReadParameterType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Owner_ (x.Owner_, f, this),
  Name_ (x.Name_, f, this)
{
}

CADReadParameterType::
CADReadParameterType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Owner_ (f, this),
  Name_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void CADReadParameterType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "Owner" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Owner_type > r (
        Owner_traits::create (i, f, this));

      this->Owner_.set (r);
      continue;
    }

    if (n.name () == "Name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Name_type > r (
        Name_traits::create (i, f, this));

      this->Name_.set (r);
      continue;
    }
  }

  if (!Owner_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Owner",
      "");
  }

  if (!Name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Name",
      "");
  }
}

CADReadParameterType* CADReadParameterType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CADReadParameterType (*this, f, c);
}

CADReadParameterType::
~CADReadParameterType ()
{
}

// IncrementType
//

IncrementType::
IncrementType ()
: ::xml_schema::type (),
  CADIncrementParameter_ (::xml_schema::flags (), this)
{
}

IncrementType::
IncrementType (const IncrementType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  CADIncrementParameter_ (x.CADIncrementParameter_, f, this)
{
}

IncrementType::
IncrementType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  CADIncrementParameter_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void IncrementType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // CADIncrementParameter
    //
    if (n.name () == "CADIncrementParameter" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< CADIncrementParameter_type > r (
        CADIncrementParameter_traits::create (i, f, this));

      this->CADIncrementParameter_.push_back (r);
      continue;
    }

    break;
  }
}

IncrementType* IncrementType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class IncrementType (*this, f, c);
}

IncrementType::
~IncrementType ()
{
}

// ReadType
//

ReadType::
ReadType ()
: ::xml_schema::type (),
  CADReadParameter_ (::xml_schema::flags (), this)
{
}

ReadType::
ReadType (const ReadType& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  CADReadParameter_ (x.CADReadParameter_, f, this)
{
}

ReadType::
ReadType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  CADReadParameter_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ReadType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // CADReadParameter
    //
    if (n.name () == "CADReadParameter" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< CADReadParameter_type > r (
        CADReadParameter_traits::create (i, f, this));

      this->CADReadParameter_.push_back (r);
      continue;
    }

    break;
  }
}

ReadType* ReadType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ReadType (*this, f, c);
}

ReadType::
~ReadType ()
{
}

// ParametricParametersType
//

ParametricParametersType::
ParametricParametersType ()
: ::xml_schema::type (),
  Increment_ (::xml_schema::flags (), this),
  Read_ (::xml_schema::flags (), this)
{
}

ParametricParametersType::
ParametricParametersType (const ParametricParametersType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Increment_ (x.Increment_, f, this),
  Read_ (x.Read_, f, this)
{
}

ParametricParametersType::
ParametricParametersType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Increment_ (f, this),
  Read_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ParametricParametersType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Increment
    //
    if (n.name () == "Increment" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Increment_type > r (
        Increment_traits::create (i, f, this));

      if (!this->Increment_)
      {
        this->Increment_.set (r);
        continue;
      }
    }

    // Read
    //
    if (n.name () == "Read" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Read_type > r (
        Read_traits::create (i, f, this));

      if (!this->Read_)
      {
        this->Read_.set (r);
        continue;
      }
    }

    break;
  }
}

ParametricParametersType* ParametricParametersType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ParametricParametersType (*this, f, c);
}

ParametricParametersType::
~ParametricParametersType ()
{
}

// UnitsType
//

UnitsType::
UnitsType (const Value_type& Value)
: ::xml_schema::type (),
  Value_ (Value, ::xml_schema::flags (), this)
{
}

UnitsType::
UnitsType (const UnitsType& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Value_ (x.Value_, f, this)
{
}

UnitsType::
UnitsType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Value_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void UnitsType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "Value" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Value_type > r (
        Value_traits::create (i, f, this));

      this->Value_.set (r);
      continue;
    }
  }

  if (!Value_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Value",
      "");
  }
}

UnitsType* UnitsType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class UnitsType (*this, f, c);
}

UnitsType::
~UnitsType ()
{
}

// CADComponentType
//

CADComponentType::
CADComponentType (const Name_type& Name,
                  const Type_type& Type,
                  const MetricsOutputFile_type& MetricsOutputFile)
: ::xml_schema::type (),
  ParametricParameters_ (::xml_schema::flags (), this),
  Name_ (Name, ::xml_schema::flags (), this),
  Type_ (Type, ::xml_schema::flags (), this),
  MetricsOutputFile_ (MetricsOutputFile, ::xml_schema::flags (), this)
{
}

CADComponentType::
CADComponentType (const CADComponentType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  ParametricParameters_ (x.ParametricParameters_, f, this),
  Name_ (x.Name_, f, this),
  Type_ (x.Type_, f, this),
  MetricsOutputFile_ (x.MetricsOutputFile_, f, this)
{
}

CADComponentType::
CADComponentType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  ParametricParameters_ (f, this),
  Name_ (f, this),
  Type_ (f, this),
  MetricsOutputFile_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void CADComponentType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // ParametricParameters
    //
    if (n.name () == "ParametricParameters" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< ParametricParameters_type > r (
        ParametricParameters_traits::create (i, f, this));

      if (!this->ParametricParameters_)
      {
        this->ParametricParameters_.set (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "Name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Name_type > r (
        Name_traits::create (i, f, this));

      this->Name_.set (r);
      continue;
    }

    if (n.name () == "Type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Type_type > r (
        Type_traits::create (i, f, this));

      this->Type_.set (r);
      continue;
    }

    if (n.name () == "MetricsOutputFile" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< MetricsOutputFile_type > r (
        MetricsOutputFile_traits::create (i, f, this));

      this->MetricsOutputFile_.set (r);
      continue;
    }
  }

  if (!Name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Name",
      "");
  }

  if (!Type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Type",
      "");
  }

  if (!MetricsOutputFile_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "MetricsOutputFile",
      "");
  }
}

CADComponentType* CADComponentType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CADComponentType (*this, f, c);
}

CADComponentType::
~CADComponentType ()
{
}

// CADComponentsType
//

CADComponentsType::
CADComponentsType ()
: ::xml_schema::type (),
  CADComponent_ (::xml_schema::flags (), this)
{
}

CADComponentsType::
CADComponentsType (const CADComponentsType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  CADComponent_ (x.CADComponent_, f, this)
{
}

CADComponentsType::
CADComponentsType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  CADComponent_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void CADComponentsType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // CADComponent
    //
    if (n.name () == "CADComponent" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< CADComponent_type > r (
        CADComponent_traits::create (i, f, this));

      this->CADComponent_.push_back (r);
      continue;
    }

    break;
  }
}

CADComponentsType* CADComponentsType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CADComponentsType (*this, f, c);
}

CADComponentsType::
~CADComponentsType ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::CADComponentsType >
CADComponents (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::CADComponentsType > r (
    ::CADComponents (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::CADComponentsType > r (
    ::CADComponents (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::CADComponentsType > r (
    ::CADComponents (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::CADComponents (isrc, f, p);
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::CADComponents (isrc, h, f, p);
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::CADComponents (isrc, h, f, p);
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::CADComponents (isrc, f, p);
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::CADComponents (isrc, h, f, p);
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::CADComponents (isrc, h, f, p);
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::CADComponentsType > r (
    ::CADComponents (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::CADComponentsType > r (
    ::CADComponents (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::CADComponentsType > r (
    ::CADComponents (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::CADComponentsType > r (
      ::CADComponents (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "CADComponents" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::CADComponentsType > r (
      ::xsd::cxx::tree::traits< ::CADComponentsType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "CADComponents",
    "");
}

::std::auto_ptr< ::CADComponentsType >
CADComponents (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "CADComponents" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::CADComponentsType > r (
      ::xsd::cxx::tree::traits< ::CADComponentsType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "CADComponents",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

