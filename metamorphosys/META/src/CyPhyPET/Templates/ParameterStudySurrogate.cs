// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhyPET.Templates
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using ISIS.GME.Dsml.CyPhyML.Classes;
    
    
    #line 1 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class ParameterStudySurrogate : ParameterStudySurrogateBase
    {
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write(@"# ===========================================================================
# Auto generated from ParameterStudySurrogate.tt
# ===========================================================================
# OpenMDAO Assembly Component (Surrogate)
import os
import json
import pickle
import logging
import numpy as np

from openmdao.main.api import Assembly, Component, SequentialWorkflow, set_as_top
from openmdao.lib.drivers.api import DOEdriver, CONMINdriver
from openmdao.lib.doegenerators.api import ");
            
            #line 29 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DOEType));
            
            #line default
            #line hidden
            this.Write("\r\nfrom openmdao.lib.casehandlers.api import ListCaseRecorder\r\nfrom openmdao.lib.c" +
                    "omponents.api import MetaModel\r\n");
            
            #line 32 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 string t = SurrogateType; 
if (t == "ResponseSurface") { 
            
            #line default
            #line hidden
            this.Write("from openmdao.lib.surrogatemodels.api import ");
            
            #line 34 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SurrogateType));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 35 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 } else if (t == "NeuralNet") { 
            
            #line default
            #line hidden
            this.Write("from neural_net.neural_net import NeuralNet\r\n");
            
            #line 37 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 } else if (t == "LogisticRegression") { 
            
            #line default
            #line hidden
            this.Write("from openmdao.lib.surrogatemodels.api import ");
            
            #line 38 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SurrogateType));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 39 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 } else if (t == "KrigingSurrogate") { 
            
            #line default
            #line hidden
            this.Write("from openmdao.lib.surrogatemodels.api import ");
            
            #line 40 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SurrogateType));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 41 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("# ERROR: Surrogate model type might not supported: ");
            
            #line 42 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pet.Children.ParameterStudyCollection.FirstOrDefault().Attributes.SurrogateType));
            
            #line default
            #line hidden
            this.Write("\r\n#from openmdao.lib.surrogatemodels.api import ");
            
            #line 43 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pet.Children.ParameterStudyCollection.FirstOrDefault().Attributes.SurrogateType));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 44 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"from openmdao.lib.surrogatemodels.api import KrigingSurrogate

from save_results import save_results
from surrogate_model import SurrogateAssembly

log = logging.getLogger()
while len(log.handlers) > 2:
    log.removeHandler(log.handlers[-1])


class ParameterStudy(Assembly):
    """""" Documentation comment for this Assembly. """"""

    def __init__(self):
        super(ParameterStudy, self).__init__()

        ## Create component instances
        self.add(""meta_model"", MetaModel())
        self.meta_model.default_surrogate = ");
            
            #line 63 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SurrogateType));
            
            #line default
            #line hidden
            this.Write("()\r\n");
            
            #line 64 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 if (SurrogateType == "NeuralNet")
{
	this.GetDoeOptions();
	if (string.IsNullOrWhiteSpace(this.NeuralNetNHiddenNodes) == false)
    {

            
            #line default
            #line hidden
            this.Write("        self.meta_model.");
            
            #line 70 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.NeuralNetNHiddenNodes));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 71 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 }
} 
            
            #line default
            #line hidden
            this.Write("        self.meta_model.model = SurrogateAssembly()\r\n\r\n        self.add(\'driver\'," +
                    " DOEdriver())\r\n        \r\n        # The type and level attributes of DOE\r\n       " +
                    " self.driver.DOEgenerator = ");
            
            #line 78 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DOEType));
            
            #line default
            #line hidden
            this.Write("()\r\n");
            
            #line 79 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
foreach (var item in GetDoeOptions())
		{
            
            #line default
            #line hidden
            this.Write("        self.driver.DOEgenerator.");
            
            #line 81 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 82 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 		}
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 84 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.DesignVariableCollection)
    {
        string low = "0.0";
        string high = "0.0";
        string range = item.Attributes.Range;
		low = range.Split(',').FirstOrDefault().Trim();
		high = range.Split(',').LastOrDefault().Trim();
        foreach (var conn in item.DstConnections.VariableSweepCollection)
        {
            string name = conn.GenericDstEnd.Name;
            InOuts += "meta_model." + name + ":%f ";
        
            
            #line default
            #line hidden
            this.Write("        self.driver.add_parameter(\'meta_model.");
            
            #line 96 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\', low = ");
            
            #line 96 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(low));
            
            #line default
            #line hidden
            this.Write(", high = ");
            
            #line 96 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(high));
            
            #line default
            #line hidden
            this.Write(") # ");
            
            #line 96 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Attributes.Range));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 97 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
         }
    } 
            
            #line default
            #line hidden
            this.Write("\r\n        self.driver.case_outputs = [ \\\r\n");
            
            #line 101 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.ObjectiveCollection)
    {
        foreach (var conn in item.SrcConnections.ObjectiveMappingCollection)
        {
            string name = conn.GenericSrcEnd.Name;
            InOuts += "meta_model." + name + ":%f ";
        
            
            #line default
            #line hidden
            this.Write("            \'meta_model.");
            
            #line 108 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\', \\\r\n");
            
            #line 109 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
        }
    } 
            
            #line default
            #line hidden
            this.Write("            ]\r\n        self.driver.add_event(\"meta_model.train_next\")\r\n        se" +
                    "lf.driver.recorders = [ListCaseRecorder(),]\r\n        self.driver.force_execute =" +
                    " True\r\n        self.driver.workflow.add(\'meta_model\')\r\n        self._logger.info" +
                    "(\'ParameterStudy assembly was created.\')\r\n\r\n\r\nclass Solver(Assembly):\r\n    \"\"\" D" +
                    "ocumentation comment for this Assembly. \"\"\"\r\n\r\n    def __init__(self, surrogate_" +
                    "trainer):\r\n        super(Solver, self).__init__()\r\n\r\n        ## Create component" +
                    " instances\r\n        self.add(\'driver\', CONMINdriver())\r\n\r\n        # Add surrogat" +
                    "e model\r\n        meta_model = surrogate_trainer.meta_model\r\n        self.add(\'me" +
                    "ta_model\', meta_model)\r\n        self.driver.workflow.add(\'meta_model\')\r\n\r\n      " +
                    "  # The type and level attributes of Optimization\r\n        self.driver.iprint = " +
                    "0\r\n        self.driver.itmax  = 100\r\n        self.driver.fdch   = .000001\r\n     " +
                    "   self.driver.fdchm  = .000001\r\n\r\n        self.driver.accuracy = 1e-5\r\n        " +
                    "self.driver.maxiter = 100\r\n\r\n        # Design Variables\r\n        params = surrog" +
                    "ate_trainer.driver.get_parameters()\r\n        for x in meta_model._surrogate_inpu" +
                    "t_names:\r\n            min_val = params[\'meta_model.\'+x].low\r\n            max_val" +
                    " = params[\'meta_model.\'+x].high\r\n            self.driver.add_parameter(\'meta_mod" +
                    "el.\'+x, low = min_val, high =  max_val) # -50, 50\r\n\r\n        # Objective\r\n      " +
                    "  self.driver.add_objective(\'meta_model.\'+meta_model._output_names[0])\r\n    # En" +
                    "d __init__\r\n\r\n    def set_objective(self, yname, type=\'min\'):\r\n\r\n        self.dr" +
                    "iver.clear_objectives()\r\n\r\n        if type==\'min\':\r\n            doe_res = self.m" +
                    "eta_model._training_data[yname]\r\n            doe_min_i = doe_res.index(min(doe_r" +
                    "es))\r\n\r\n            for j,x in enumerate(self.meta_model._surrogate_input_names)" +
                    ":\r\n                setattr(self.meta_model, x, self.meta_model._training_input_h" +
                    "istory[doe_min_i][j])\r\n            self.driver.add_objective(\'meta_model.\'+yname" +
                    ")\r\n\r\n        elif type==\'max\':\r\n            doe_res = self.meta_model._training_" +
                    "data[yname]\r\n            doe_max_i = doe_res.index(max(doe_res))\r\n\r\n            " +
                    "for j,x in enumerate(self.meta_model._surrogate_input_names):\r\n                s" +
                    "etattr(self.meta_model, x, self.meta_model._training_input_history[doe_max_i][j]" +
                    ")\r\n            self.driver.add_objective(\'-1.0*meta_model.\'+yname)\r\n\r\n# End clas" +
                    "s\r\n\r\ndef y_min_max(surrogate_trainer):\r\n    result = {}\r\n\r\n    s = Solver(surrog" +
                    "ate_trainer)\r\n\r\n    responses = surrogate_trainer.meta_model._training_data.keys" +
                    "()\r\n\r\n    for r_name in responses:\r\n        s.set_objective(r_name,type=\'min\')\r\n" +
                    "        s.run()\r\n        y_min = eval(\'s.meta_model.\'+r_name)\r\n\r\n        s.set_o" +
                    "bjective(r_name,type=\'max\')\r\n        s.run()\r\n        y_max = eval(\'s.meta_model" +
                    ".\'+r_name)\r\n\r\n        result[r_name] = [y_min, y_max]\r\n\r\n    return result\r\n\r\n\r\n" +
                    "def main():\r\n    doe = ParameterStudy()\r\n    set_as_top(doe)\r\n    doe.run()\r\n\r\n " +
                    "   meta_model_info = {}\r\n    meta_model_info[\'training_input_history\'] = doe.met" +
                    "a_model._training_input_history\r\n    meta_model_info[\'surrogate_info\'] = {}\r\n");
            
            #line 204 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.ObjectiveCollection)
    {
        foreach (var conn in item.SrcConnections.ObjectiveMappingCollection)
        {
            string name = conn.GenericSrcEnd.Name;
        
            
            #line default
            #line hidden
            this.Write("    meta_model_info[\'surrogate_info\'][\'");
            
            #line 210 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'] = (\r\n           doe.meta_model._default_surrogate_copies[\'");
            
            #line 211 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'],\r\n           doe.meta_model._training_data[\'");
            
            #line 212 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'])\r\n");
            
            #line 213 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
        }
    } 
            
            #line default
            #line hidden
            this.Write(@"
    meta_model_info['meta_model'] = doe.meta_model

    f = open(""meta_model_info.p"", ""wb"")
    pickle.dump(meta_model_info, f)
    f.close()

    isKrigingDefault = isinstance(doe.meta_model.default_surrogate, KrigingSurrogate)

    if isKrigingDefault:
        for i, c in enumerate(doe.driver.recorders[0].cases):
            for case_output in doe.driver.case_outputs:
                c[case_output] = c[case_output].mu
            doe.driver.recorders[0].cases[i] = c


    sr = save_results(doe, doe.driver.recorders[0])
    sr.save('output.mdao')

    # write the case output to the screen
    for c in doe.driver.recorders[0].get_iterator():
        print """);
            
            #line 236 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(InOuts));
            
            #line default
            #line hidden
            this.Write("\"%(\r\n");
            
            #line 237 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.DesignVariableCollection)
    {
        foreach (var conn in item.DstConnections.VariableSweepCollection)
        {
			string name = conn.GenericDstEnd.Name;
        
            
            #line default
            #line hidden
            this.Write("            c[\'meta_model.");
            
            #line 243 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'],\r\n");
            
            #line 244 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
        }
    } 
    foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.ObjectiveCollection)
    {
        foreach (var conn in item.SrcConnections.ObjectiveMappingCollection)
        {
			string name = conn.GenericSrcEnd.Name;
        
            
            #line default
            #line hidden
            this.Write("            c[\'meta_model.");
            
            #line 252 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'],\r\n");
            
            #line 253 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
        }
    } 
            
            #line default
            #line hidden
            this.Write("            )\r\n");
            
            #line 256 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 if (SurrogateType == "ResponseSurface")
{
            
            #line default
            #line hidden
            this.Write("    ##  ResponseSurface is surrogate,\r\n    #   write model info to meta_model.jso" +
                    "n\r\n    doe.meta_model.execute()\r\n\r\n    try:\r\n        with open(\'testbench_manife" +
                    "st.json\', \'r\') as f_in:\r\n            json_out = json.load(f_in)\r\n            jso" +
                    "n_out[\'responses\']=[]\r\n    except IOError:\r\n        json_out = {\'responses\':[]}\r" +
                    "\n\r\n    yminmax = y_min_max(doe)\r\n\r\n    for i, y in enumerate(meta_model_info[\'me" +
                    "ta_model\']._training_data.keys()):\r\n\r\n        yy = {}\r\n        yy[\'rid\'] = \'r\' +" +
                    " str(i)\r\n        yy[\'metric\'] = y\r\n        yy[\'min\'] = yminmax[y][0]\r\n        yy" +
                    "[\'max\'] = yminmax[y][1]\r\n        yy[\'surrogateType\'] = \'Response Surface\'\r\n     " +
                    "   \r\n        yy[\'inputs\'] = []\r\n        doe_params = doe.driver.get_parameters()" +
                    "\r\n        for i, x in enumerate(meta_model_info[\'meta_model\']._surrogate_input_n" +
                    "ames):\r\n            min_val = doe_params[\'meta_model.\'+x].low\r\n            max_v" +
                    "al = doe_params[\'meta_model.\'+x].high\r\n            yy[\'inputs\'].append({\'min\':mi" +
                    "n_val, \'max\':max_val, \'label\': x})\r\n\r\n        yy[\'coefficients\'] = {}\r\n        n" +
                    "_inp = meta_model_info[\'surrogate_info\'][y][0].n\r\n        betas = meta_model_inf" +
                    "o[\'surrogate_info\'][y][0].betas\r\n\r\n        beta_names = []\r\n        for j in ran" +
                    "ge(0,n_inp+1):\r\n            beta_names.append(\'b\'+str(j))\r\n\r\n        for j in ra" +
                    "nge(1,n_inp+1):\r\n            beta_names.append(\'b\'+str(j)+str(j))\r\n\r\n        for" +
                    " j in range(1,n_inp):\r\n            for k in range(j+1,n_inp+1):\r\n               " +
                    " beta_names.append(\'b\'+str(j)+str(k))\r\n\r\n        for j, b in enumerate(betas):\r\n" +
                    "            yy[\'coefficients\'][beta_names[j]] = b.item(0)\r\n\r\n        c = yy[\'coe" +
                    "fficients\']\r\n        x_names = meta_model_info[\'meta_model\']._surrogate_input_na" +
                    "mes\r\n        yy[\'function\'] = \'\'+str(c[\'b0\'])\r\n        for j in range(1,n_inp+1)" +
                    ":\r\n            coeff = c[\'b\'+str(j)]\r\n            if coeff >=0:\r\n               " +
                    " yy[\'function\'] += \'+\'+str(coeff)\r\n            else:\r\n                yy[\'functi" +
                    "on\'] += str(coeff)\r\n            yy[\'function\'] += \'*\'+x_names[j-1]\r\n\r\n        fo" +
                    "r j in range(1,n_inp+1):\r\n            coeff = str(c[\'b\'+str(j)+str(j)])\r\n       " +
                    "     if coeff >= 0:\r\n                yy[\'function\'] += \'+\'+str(coeff)\r\n         " +
                    "   else:\r\n                yy[\'function\'] += str(coeff)\r\n            yy[\'function" +
                    "\'] += \'*\'+x_names[j-1]+\'*\'+x_names[j-1]\r\n        for j in range(1,n_inp):\r\n     " +
                    "       for k in range(j+1,n_inp+1):\r\n                coeff = str(c[\'b\'+str(j)+st" +
                    "r(k)])\r\n                if coeff >= 0:\r\n                    yy[\'function\'] += \'+" +
                    "\'+str(coeff)\r\n                else:\r\n                    yy[\'function\'] += str(c" +
                    "oeff)\r\n                yy[\'function\'] += \'*\'+x_names[j-1]+\'*\'+x_names[k-1]\r\n    " +
                    "    json_out[\'responses\'].append(yy)\r\n\r\n    with open(\'testbench_manifest.json\'," +
                    "\'wb\') as f_out:\r\n        json.dump(json_out, f_out, indent=4)\r\n\r\n    ## Model fi" +
                    "t info in model_perf.json\r\n    params = {}\r\n    actual = {}\r\n    predicted = {}\r" +
                    "\n");
            
            #line 340 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.DesignVariableCollection)
    {
        foreach (var conn in item.DstConnections.VariableSweepCollection)
        {
			string name = conn.GenericDstEnd.Name;
        
            
            #line default
            #line hidden
            this.Write("    params[\'");
            
            #line 346 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'] = []\r\n");
            
            #line 347 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
        }
    } 
    foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.ObjectiveCollection)
    {
        foreach (var conn in item.SrcConnections.ObjectiveMappingCollection)
        {
			string name = conn.GenericSrcEnd.Name;
        
            
            #line default
            #line hidden
            this.Write("    actual[\'");
            
            #line 355 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'] = []\r\n    predicted[\'");
            
            #line 356 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'] = []\r\n");
            
            #line 357 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
        }
    } 
            
            #line default
            #line hidden
            this.Write("\r\n    for c in doe.driver.recorders[0].get_iterator():\r\n");
            
            #line 361 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.DesignVariableCollection)
    {
        foreach (var conn in item.DstConnections.VariableSweepCollection)
        {
			string name = conn.GenericDstEnd.Name;
        
            
            #line default
            #line hidden
            this.Write("        doe.meta_model.");
            
            #line 367 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = c[\'meta_model.");
            
            #line 367 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\']\r\n");
            
            #line 368 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
        }
    }

            
            #line default
            #line hidden
            this.Write("        doe.meta_model.execute()\r\n");
            
            #line 372 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
 foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.DesignVariableCollection)
    {
        foreach (var conn in item.DstConnections.VariableSweepCollection)
        {
			string name = conn.GenericDstEnd.Name;
        
            
            #line default
            #line hidden
            this.Write("        params[\'");
            
            #line 378 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'].append(c[\'meta_model.");
            
            #line 378 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'])\r\n");
            
            #line 379 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
        }
    }
    foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.ObjectiveCollection)
    {
        foreach (var conn in item.SrcConnections.ObjectiveMappingCollection)
        {
			string name = conn.GenericSrcEnd.Name;
        
            
            #line default
            #line hidden
            this.Write("        actual[\'");
            
            #line 387 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'].append(c[\'meta_model.");
            
            #line 387 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'])  \r\n        predicted[\'");
            
            #line 388 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\'].append(doe.meta_model.");
            
            #line 388 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 389 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
        }
    } 
            
            #line default
            #line hidden
            this.Write("    perf_json = []\r\n\r\n    for y_name, y_pred in predicted.iteritems():\r\n\r\n       " +
                    " y_pred = np.array(y_pred)\r\n        y_act = np.array(actual[y_name])\r\n        y_" +
                    "mean = y_pred.mean()\r\n        n = len(y_pred)\r\n        p = len(params.keys())\r\n\r" +
                    "\n        for x in json_out[\'responses\']:\r\n            if x[\'metric\'] == y_name:\r" +
                    "\n                fn = x[\'function\']\r\n                coef = x[\'coefficients\']\r\n " +
                    "               vars = {}\r\n                for v in x[\'inputs\']:\r\n               " +
                    "     vars[v[\'label\']] = [v[\'min\'], v[\'max\']]\r\n                break\r\n\r\n        r" +
                    "esp = {}\r\n        resp[\'responseName\'] = y_name\r\n        resp[\'responseType\'] = " +
                    "\'RSE\'\r\n        resp[\'response\'] = y_name + \'=\' + fn\r\n        resp[\'coefficients\'" +
                    "] = coef\r\n        resp[\'variables\'] = vars\r\n\r\n        SStot = np.linalg.norm(y_p" +
                    "red - y_mean) ** 2\r\n        SSres = np.linalg.norm(y_pred - y_act) ** 2\r\n       " +
                    " MFE = (SSres / n) ** 0.5\r\n\r\n        resp[\'R2\'] = {}\r\n        resp[\'R2\'][\'traini" +
                    "ng\'] = 1 - SSres / SStot\r\n        Rsq = resp[\'R2\'][\'training\']\r\n        resp[\'R2" +
                    "adjusted\'] = {}\r\n        resp[\'R2adjusted\'][\'training\'] = Rsq - (1 - Rsq) * p / " +
                    "(n - p - 1)\r\n\r\n        residual = y_act-y_pred\r\n        resp[\'MFE\'] = {}\r\n      " +
                    "  resp[\'MFE\'][\'mean\'] = residual.mean()\r\n        resp[\'MFE\'][\'stdDeviation\'] = r" +
                    "esidual.std()\r\n        resp[\'MFE\'][\'data\'] = residual.tolist()\r\n\r\n        resp[\'" +
                    "actualByPredicted\'] = {}\r\n        resp[\'actualByPredicted\'][\'training\'] = \\\r\n   " +
                    "         [ [y_act[i], y_pred[i]] for i in xrange(len(y_act)) ]\r\n\r\n        resp[\'" +
                    "residualByPredicted\'] = {}\r\n        resp[\'residualByPredicted\'][\'training\'] = \\\r" +
                    "\n            [ [residual[i], y_pred[i]] for i in xrange(len(y_act)) ]\r\n\r\n       " +
                    " perf_json.append(resp)\r\n\r\n    with open(\'model_perf.json\',\'wb\') as f_out:\r\n    " +
                    "    json.dump(perf_json, f_out, indent=4)\r\n");
            
            #line 445 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n# End\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 452 "C:\work\meta\trunk\src\CyPhyPET\Templates\ParameterStudySurrogate.tt"

	public string DOEType {get; set;}
	public string SurrogateType {get; set;}
	public string ParameterStudyName {get; set; }
    public ISIS.GME.Dsml.CyPhyML.Interfaces.ParametricExploration pet { get; set; }    
    public string InOuts {get; set;}
    private string NeuralNetNHiddenNodes {get;set;}
	private IEnumerable<string> GetDoeOptions() {
		List<string> result = new List<string>();		
		string[] vals = pet.Children.ParameterStudyCollection.FirstOrDefault().Attributes.Code.Split('\n');
		foreach (var item in vals)
		{
			if (string.IsNullOrEmpty(item) == false)
			{
				if (item.StartsWith("n_hidden_nodes"))
                {
					this.NeuralNetNHiddenNodes = item.Trim();
                }
				else
                {
					result.Add(item);
                }
			}
		}		
		return result;
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class ParameterStudySurrogateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
