<#@ template language="C#" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="ISIS.GME.Dsml.CyPhyML.Classes" #> 
<#@ output extension=".py" #>
# ===========================================================================
# # Auto generated from ParameterStudy.tt
# ===========================================================================
# OpenMDAO Assembly Component (DOE)
import logging

from openmdao.main.api import Assembly, set_as_top
from openmdao.lib.drivers.api import DOEdriver
from openmdao.lib.doegenerators.api import CSVFile
from openmdao.lib.casehandlers.api import ListCaseRecorder

from save_results import save_results
from test_bench import TestBench

log = logging.getLogger()
while len(log.handlers) > 2:
    log.removeHandler(log.handlers[-1])


class ParameterStudy(Assembly):
    """ Documentation comment for this Assembly. """
   
    def __init__(self):
        super(ParameterStudy, self).__init__()

        ## Create component instances
        self.add('TestBench', TestBench())
        self.add('driver', DOEdriver())
        
        # The type and level attributes of DOE
        self.driver.DOEgenerator = CSVFile('doe_inputs.csv')
<# foreach (var item in this.Parameters)
    {
        foreach (var conn in item.DstConnections.VariableSweepCollection)
        {
            string name = "TestBench." + conn.GenericDstEnd.Name;
            InOuts += name + ":%f ";
        #>
        self.driver.add_parameter('<#= name #>', low=0, high = 1)
<#         }
    } #>
        self.driver.case_outputs = [ \
<# foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.ObjectiveCollection)
    {
        foreach (var conn in item.SrcConnections.ObjectiveMappingCollection)
        {
            string name = "TestBench." + conn.GenericSrcEnd.Name;
            InOuts += name + ":%f ";
        #>
            '<#= name #>', \
<#        }
    } #>
            ]
        self.driver.recorders = [ListCaseRecorder(),]
        self.driver.workflow.add(['TestBench'])
        self._logger.info('Assembly was created. (TestBench)')

def main():
    doe = ParameterStudy()
    set_as_top(doe)
    doe.run()

    sr = save_results(doe, doe.driver.recorders[0])
    sr.save('output.mdao')

    #write the case output to the screen
    for c in doe.driver.recorders[0].get_iterator():
    
        print "<#= InOuts #>"%(
<# foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.DesignVariableCollection)
    {
        foreach (var conn in item.DstConnections.VariableSweepCollection)
        {
            string name = "TestBench." + conn.GenericDstEnd.Name;
        #>
            c['<#= name #>'],
<#        }
    } 
    foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.ObjectiveCollection)
    {
        foreach (var conn in item.SrcConnections.ObjectiveMappingCollection)
        {
            string name = "TestBench." + conn.GenericSrcEnd.Name;
        #>
            c['<#= name #>'],
<#        }
    } #>
            )

if __name__ == "__main__":
    main()
<#+
	public string DOEType {get; set;}
	
    public ISIS.GME.Dsml.CyPhyML.Interfaces.ParametricExploration pet { get; set; }    
    public string InOuts {get; set;}
	public List<ISIS.GME.Dsml.CyPhyML.Interfaces.DesignVariable> Parameters {get;set;}
	private IEnumerable<string> GetDoeOptions() {
		List<string> result = new List<string>();		
		string[] vals = pet.Children.ParameterStudyCollection.FirstOrDefault().Attributes.Code.Split('\n');
		foreach (var item in vals)
		{
			if (string.IsNullOrEmpty(item) == false)
			{
				result.Add(item);
			}
		}		
		return result;
	}
#>