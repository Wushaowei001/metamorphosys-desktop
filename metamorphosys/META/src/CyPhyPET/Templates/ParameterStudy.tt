/*
Copyright (C) 2013-2015 MetaMorph Software, Inc

Permission is hereby granted, free of charge, to any person obtaining a
copy of this data, including any software or models in source or binary
form, as well as any drawings, specifications, and documentation
(collectively "the Data"), to deal in the Data without restriction,
including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Data, and to
permit persons to whom the Data is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Data.

THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.  

=======================
This version of the META tools is a fork of an original version produced
by Vanderbilt University's Institute for Software Integrated Systems (ISIS).
Their license statement:

Copyright (C) 2011-2014 Vanderbilt University

Developed with the sponsorship of the Defense Advanced Research Projects
Agency (DARPA) and delivered to the U.S. Government with Unlimited Rights
as defined in DFARS 252.227-7013.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this data, including any software or models in source or binary
form, as well as any drawings, specifications, and documentation
(collectively "the Data"), to deal in the Data without restriction,
including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Data, and to
permit persons to whom the Data is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Data.

THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.  
*/

<#@ template language="C#" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="ISIS.GME.Dsml.CyPhyML.Classes" #> 
<#@ output extension=".py" #>
# ===========================================================================
# # Auto generated from ParameterStudy.tt
# ===========================================================================
# OpenMDAO Assembly Component (DOE)
import logging

from openmdao.main.api import Assembly, set_as_top
from openmdao.lib.drivers.api import DOEdriver
from openmdao.lib.doegenerators.api import <#= DOEType #>
from openmdao.lib.casehandlers.api import ListCaseRecorder

from save_results import save_results
from test_bench import TestBench

log = logging.getLogger()
while len(log.handlers) > 2:
    log.removeHandler(log.handlers[-1])


class ParameterStudy(Assembly):
    """ Documentation comment for this Assembly. """
   
    def __init__(self):
        super(ParameterStudy, self).__init__()

        ## Create component instances
        self.add('TestBench', TestBench())
        self.add('driver', DOEdriver())
        
        # The type and level attributes of DOE
        self.driver.DOEgenerator = <#= DOEType #>()
<# 		foreach (var item in GetDoeOptions())
		{#>
        self.driver.DOEgenerator.<#= item #>
<# 		}#>
<# foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.DesignVariableCollection)
    {
        string low = "0.0";
        string high = "0.0";
        string range = item.Attributes.Range;
		low = range.Split(',').FirstOrDefault().Trim();
		high = range.Split(',').LastOrDefault().Trim();
        foreach (var conn in item.DstConnections.VariableSweepCollection)
        {
            string name = "TestBench." + conn.GenericDstEnd.Name;
            InOuts += name + ":%f ";
        #>
        self.driver.add_parameter('<#= name #>', low = <#= low #>, high = <#= high #>) # <#= item.Attributes.Range #>
<#         }
    } #>
        self.driver.case_outputs = [ \
<# foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.ObjectiveCollection)
    {
        foreach (var conn in item.SrcConnections.ObjectiveMappingCollection)
        {
            string name = "TestBench." + conn.GenericSrcEnd.Name;
            InOuts += name + ":%f ";
        #>
            '<#= name #>', \
<#        }
    } #>
            ]
        self.driver.recorders = [ListCaseRecorder(),]
        self.driver.workflow.add(['TestBench'])
        self._logger.info('Assembly was created. (TestBench)')

def main():
    doe = ParameterStudy()
    set_as_top(doe)
    doe.run()

    sr = save_results(doe, doe.driver.recorders[0])
    sr.save('output.mdao')

    #write the case output to the screen
    for c in doe.driver.recorders[0].get_iterator():
    
        print "<#= InOuts #>"%(
<# foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.DesignVariableCollection)
    {
        foreach (var conn in item.DstConnections.VariableSweepCollection)
        {
            string name = "TestBench." + conn.GenericDstEnd.Name;
        #>
            c['<#= name #>'],
<#        }
    } 
    foreach (var item in pet.Children.ParameterStudyCollection.FirstOrDefault().Children.ObjectiveCollection)
    {
        foreach (var conn in item.SrcConnections.ObjectiveMappingCollection)
        {
            string name = "TestBench." + conn.GenericSrcEnd.Name;
        #>
            c['<#= name #>'],
<#        }
    } #>
            )

if __name__ == "__main__":
    main()
<#+
	public string DOEType {get; set;}
	
    public ISIS.GME.Dsml.CyPhyML.Interfaces.ParametricExploration pet { get; set; }    
    public string InOuts {get; set;}
	
	private IEnumerable<string> GetDoeOptions() {
		List<string> result = new List<string>();		
		string[] vals = pet.Children.ParameterStudyCollection.FirstOrDefault().Attributes.Code.Split('\n');
		foreach (var item in vals)
		{
			if (string.IsNullOrEmpty(item) == false)
			{
				result.Add(item);
			}
		}		
		return result;
	}
#>