<#@ template language="C#" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\..\trunk\externals\common-scripts\ISIS.GME.Common.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\..\trunk\generated\CyPhyML\models\ISIS.GME.Dsml.CyPhyML.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="ISIS.GME.Dsml.CyPhyML.Classes" #> 
<#@ output extension=".py" #>
# ===========================================================================
# Auto generated from TemplateExecutor.tt
# ===========================================================================
"""
Functions in this file are always called from the TestBench directory. They must
return from that directory (if there is an exception it does not matter).
"""
import logging
# Throw this exception for "expected" errors.
from driver_runner import TestBenchExecutionError


def initial_run():
    """
    Setup whatever needs to be setup once. Then execute a run once using the default parameters
    in testbench_manifest.json. (These and their metrics will be saved and used in the final
    testbench_manifest.json.
    """
    log = logging.getLogger()
    log.info('Running initial run...')
    raise TestBenchExecutionError('There is no implemention for test_bench_executor.py!')


def update_parameters(parameters):
    """
    Update parameters for the run. (The parameters are already updated in testbench_manifest.json.)
    :type parameters: dict
    :param parameters: keys are name of Parameter and value is float.
    """
    log = logging.getLogger()
    log.info('Updating parameters...')
    raise TestBenchExecutionError('There is no implemention for test_bench_executor.py!')


def execute():
    """
    Execute the test-bench. A call to this function should update the metrics in the testbench_manifest.json.
    :rtype: dict or None
    :return: Dictionary with metrics names and values if testbench_manifest.json is not updated, else None.
    """
    log = logging.getLogger()
    log.info('Executing test-bench...')
    raise TestBenchExecutionError('There is no implemention for test_bench_executor.py!')