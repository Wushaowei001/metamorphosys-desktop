// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhyPET.Templates.TestBenchExecutors
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using ISIS.GME.Dsml.CyPhyML.Classes;
    
    
    #line 1 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class Formula : FormulaBase
    {
        public virtual string TransformText()
        {
            this.Write(@"# ===========================================================================
# Auto generated from SimpleCalculation.tt
# ===========================================================================
# OpenMDAO Component
#   Type: Block
from openmdao.main.api import Component
from openmdao.lib.datatypes.api import Float
from math import *
import os

class TestBench(Component):
    """""" Documentation comment for this Assembly. """"""

    ## set up interface to the framework
    # input (parameters) definitions
");
            
            #line 32 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
    foreach (var item in testBench.Children.ParameterCollection)
        {
            string value = item.Attributes.Value == "" ? "0.0" : item.Attributes.Value;
            //string unit = item.Referred.ParamPropTarget != null ? ", units='" + item.Referred.ParamPropTarget.Name + "'" : "";
			string unit = "";
            
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 38 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = Float(");
            
            #line 38 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(value));
            
            #line default
            #line hidden
            this.Write(", iotype=\'in\', desc=\'");
            
            #line 38 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\'");
            
            #line 38 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 39 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n    # output (parameters) definitions\r\n");
            
            #line 42 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
     foreach (var item in testBench.Children.MetricCollection)
        {
            string value = item.Attributes.Value == "" ? "0.0" : item.Attributes.Value;
            string unit = item.Referred.ParamPropTarget != null ? ", units='" + item.Referred.ParamPropTarget.Name + "'" : "";
            
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 47 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = Float(");
            
            #line 47 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(value));
            
            #line default
            #line hidden
            this.Write(", iotype=\'out\', desc=\'");
            
            #line 47 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\'");
            
            #line 47 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 48 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n    def __init__(self):\r\n        # $Static\r\n        super(TestBench, self).__in" +
                    "it__()\r\n        # $GENERIC - all formulas\r\n        # $set the strings based on w" +
                    "hat was put in for muparser\r\n");
            
            #line 55 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
    foreach (var item in testBench.Children.CustomFormulaCollection)
        {
            string expr = item.Attributes.Expression.Replace('\n',' ');
            
            #line default
            #line hidden
            this.Write("        self.__mustring_");
            
            #line 58 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = \'");
            
            #line 58 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(expr));
            
            #line default
            #line hidden
            this.Write("\'\r\n");
            
            #line 59 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            
            #line 60 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
    foreach (var item in testBench.Children.CustomFormulaCollection)
        { 
            
            #line default
            #line hidden
            this.Write("        self.");
            
            #line 62 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = 0\r\n");
            
            #line 63 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n    # End __init__\r\n    def testComputation(self):\r\n        print \"--- Input De" +
                    "faults ---\"\r\n");
            
            #line 68 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
    foreach (var item in testBench.Children.ParameterCollection)
        { 
            
            #line default
            #line hidden
            this.Write("        print \"");
            
            #line 70 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(":\" + str(self.");
            
            #line 70 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 71 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n        print \"--- Collecting default Output Values ---\"\r\n\r\n        # $Generic " +
                    "- all outputs (metrics)\r\n");
            
            #line 76 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
     foreach (var item in testBench.Children.MetricCollection)
        { 
            
            #line default
            #line hidden
            this.Write("        local_");
            
            #line 78 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = self.");
            
            #line 78 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 79 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n        # $Static\r\n        print \"--- Evaluating ---\"\r\n        self.execute()\r\n" +
                    "        # $Generic - all outputs (metrics)\r\n        outputList = [\r\n");
            
            #line 86 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
     foreach (var item in testBench.Children.MetricCollection)
        { 
            
            #line default
            #line hidden
            this.Write("         (\"");
            
            #line 88 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\", local_");
            
            #line 88 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(", self.");
            
            #line 88 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 89 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write(@"        ]
        # $Static
        absRelError = 0
        print ""--- Metric, Output, relative error ---""
        for name, expected, computed in outputList:
            relError = abs(expected-computed)/(abs(computed)+1e-8)
            print name + "", \t"" + str(computed) + "", \t"" + str(relError)
            absRelError = max(absRelError, relError)
        # End for
        print ""Max Relative Error: ""
        print str(absRelError)
    # End testComputation
    def execute(self):
        # $GENERIC - all formulas and outputs (metrics) in order of dependency
        #  TODO: Dependency is not captured yet!
");
            
            #line 105 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
    foreach (var item in testBench.Children.CustomFormulaCollection)
        { 
            
            #line default
            #line hidden
            this.Write("        self.");
            
            #line 107 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = self.muParse(self.__mustring_");
            
            #line 107 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 108 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 110 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
    foreach (var item in testBench.Children.ValueFlowCollection)
        {
            if (item.DstEnd is ISIS.GME.Dsml.CyPhyML.Interfaces.Metric)
            { 
            
            #line default
            #line hidden
            this.Write("        self.");
            
            #line 114 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.DstEnd.Name));
            
            #line default
            #line hidden
            this.Write(" = self.");
            
            #line 114 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SrcEnd.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 115 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
          }
        } 
            
            #line default
            #line hidden
            this.Write("    # End execute\r\n    def muParse(self, s):\r\n        # $GENERIC - all inputs (pa" +
                    "rameters) formulas and outputs(metrics)\r\n");
            
            #line 120 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
    foreach (var item in testBench.Children.ParameterCollection)
        { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 122 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = self.");
            
            #line 122 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 123 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 125 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
    foreach (var item in testBench.Children.CustomFormulaCollection)
        { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 127 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = self.");
            
            #line 127 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 128 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 130 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
     foreach (var item in testBench.Children.MetricCollection)
        { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 132 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = self.");
            
            #line 132 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 133 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"
        } 
            
            #line default
            #line hidden
            this.Write("        return eval(s.replace(\'^\', \'**\'))\r\n    # End muParse\r\n# End TestBench cla" +
                    "ss\r\nif __name__ == \'__main__\':\r\n    print \"Instantiating TestBench component\"\r\n " +
                    "   singleComponent = TestBench()\r\n    singleComponent.testComputation()\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 142 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Formula.tt"

    public ISIS.GME.Dsml.CyPhyML.Interfaces.TestBench testBench { get; set; }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class FormulaBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
