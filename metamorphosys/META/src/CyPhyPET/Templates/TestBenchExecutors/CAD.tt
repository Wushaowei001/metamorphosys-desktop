<#@ template language="C#" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\..\trunk\externals\common-scripts\ISIS.GME.Common.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\..\trunk\generated\CyPhyML\models\ISIS.GME.Dsml.CyPhyML.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="ISIS.GME.Dsml.CyPhyML.Classes" #> 
<#@ output extension=".py" #>
# ===========================================================================
# Auto generated from CAD.tt
# ===========================================================================
"""
Functions in this file are always called from the TestBench directory. They must
return from that directory (if there is an exception it does not matter).
"""
import os
import subprocess
import logging
import time
import xml.etree.ElementTree as ET
# Throw this exception for "expected" errors.
from driver_runner import TestBenchExecutionError

## Maximum time in seconds to wait for each execution.
MAX_WAIT_TIME = 3600 * <#=this.MaxIterationExecutionTime#>

class TestBenchParameter_to_CadAssembly(object):
    """
    Class definition

    """
    # hard-coded names
    local_cadassembly_name = 'CADAssembly.xml'
    modified_cadassembly_name = 'CADAssembly.xml'

    testbench_manifest_json = 'testbench_manifest.json'
    testbench_cadparam_json = 'CADParamTestBenchMapping.json'
    layout_json_name = ''

    # dictionaries
    tbmanifest_param_list = []

    def __init__(self):
        """
        Constructor

        """
        self.logger = logging.getLogger()
        self.tbmanifest_param_list = []
        # paths
        project_root = ''
        path_to_stats_folder = ''

    def parse_json(self, file):
        import json
        parsed_json_dict = {}
        with open(file, 'r') as f_in:
            parsed_json_dict = json.load(f_in)

        return parsed_json_dict

    def populate_cadparam_values(self):
        instanceguid_param_dict = {}
        tbmanifest_dict = self.parse_json(self.testbench_manifest_json)
        if 'Parameters' in tbmanifest_dict:
            self.tbmanifest_param_list = tbmanifest_dict['Parameters']
            self.logger.info(self.tbmanifest_param_list)
        cadparam_mapping_list = self.parse_json(self.testbench_cadparam_json)
        for cadparam in cadparam_mapping_list:
            if 'TestBenchParameterName' in cadparam:
                value = self.find_testbench_param_value(cadparam['TestBenchParameterName'])
                if value is not None:
                    if cadparam['ComponentInstanceGUID'] not in instanceguid_param_dict:
                        instanceguid_param_dict[cadparam['ComponentInstanceGUID']] = {}

                    instanceguid_param_dict[cadparam['ComponentInstanceGUID']][cadparam['ComponentCADParameterName']] = value
                    self.logger.info('instanceguid_param_dict : {0}'.format(instanceguid_param_dict))

        return instanceguid_param_dict

    def find_testbench_param_value(self, param_name):
        value = None
        for param in self.tbmanifest_param_list:
            if param['Name'] == param_name:
                value = param['Value']

        return value

    def modify_cad_assembly_file(self, statusfile):
        import xml.etree.ElementTree as ET
        tree = ET.parse(self.local_cadassembly_name)
        root = tree.getroot()

        instanceguid_param_dict = self.populate_cadparam_values()
        # find Component under <Assemblies><Assembly>
        for ass_elem in tree.iter(tag='Assembly'):
            for cc_parent in ass_elem.findall('CADComponent'):
                self.logger.debug('Found a parent component in CADAssembly.xml [' + str(cc_parent.attrib['DisplayName']) + ']')
                for cc in cc_parent.findall('CADComponent'):
                    self.logger.debug('Found a component in CADAssembly.xml [' + str(cc.attrib['DisplayName']) + ']')
                    if cc.attrib['ComponentID'] in instanceguid_param_dict:
                        guid = cc.attrib['ComponentID']
                        cadparam_dict_src = instanceguid_param_dict[guid]
                        # recurse Found Element Component to find CADParameters
                        for pp in cc.findall('ParametricParameters'):
                            for cp in pp.findall('CADParameter'):
                                if cp.get('Name') in cadparam_dict_src:
                                    cp.set('Value', str(cadparam_dict_src[cp.get('Name')]))
                                    statusfile.write('Replaced in XML [%s:%s:%s]\n' % (guid, cp.get('Name'), str(cadparam_dict_src[cp.get('Name')])))

            tree.write(self.modified_cadassembly_name)
            self.logger.debug('end')


def initial_run():
    """
    Setup whatever needs to be setup once. Then execute a run once using the default parameters
    in testbench_manifest.json. (These and their metrics will be saved and used in the final
    testbench_manifest.json.
    """
    log = logging.getLogger()
    log.info('Running initial run, calling execute.')
    execute()


def update_parameters(parameters):
    """
    Update parameters for the run. (The parameters are already updated in testbench_manifest.json.)
    :type parameters: dict
    :param parameters: keys are name of Parameter and value is float.
    """
    log = logging.getLogger()
    log.info('About to update parameters in CADAssembly.xml.')
    ltc = TestBenchParameter_to_CadAssembly()
    with open('CADParamTestBenchMapping.log', 'w') as statusfile:
        ltc.modify_cad_assembly_file(statusfile)

    log.info('Wrote back to CADAssembly.xml')


def execute():
    """
    Execute the test-bench. A call to this function should update the metrics in the testbench_manifest.json.
    :rtype: dict or None
    :return: Dictionary with metrics names and values if testbench_manifest.json is not updated, else None.
    """
    log = logging.getLogger()
    cad_bat = 'runCADJob.bat'
    out_put_file = 'PET_run.txt'

    if os.path.isfile(out_put_file):
        os.remove(out_put_file)

    log.info('About to call :: {}'.format(os.path.abspath(cad_bat)))
    was_killed = False
    with open(out_put_file, 'w') as f_out:
        timer = 0
        sim_process = subprocess.Popen(cad_bat, stdout=f_out, stderr=f_out)
        while sim_process.poll() is None:
            time.sleep(0.1)
            timer += 0.1
        if timer > MAX_WAIT_TIME:
            sim_process.kill()
            f_out.write('runCADJob.bat exceeded MAX_WAIT_TIME = {0} (seconds).'.format(MAX_WAIT_TIME))
            was_killed = True

    with open(out_put_file, 'r') as f_in:
        out_put = ''.join(f_in.readlines())
    if was_killed:
        raise TestBenchExecutionError(out_put)
    else:
        log.debug(out_put)
        log.info('Successful {} run!'.format(cad_bat))

    return None

<#+ 
public int MaxIterationExecutionTime {get;set;}
 #>