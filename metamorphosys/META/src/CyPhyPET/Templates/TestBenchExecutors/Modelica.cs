// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhyPET.Templates.TestBenchExecutors
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using ISIS.GME.Dsml.CyPhyML.Classes;
    
    
    #line 1 "C:\META\meta_trunk\src\CyPhyPET\Templates\TestBenchExecutors\Modelica.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class Modelica : ModelicaBase
    {
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write(" \r\n");
            this.Write(" \r\n \r\n# =========================================================================" +
                    "==\r\n# Auto generated from Modelica.tt\r\n# =======================================" +
                    "====================================\r\n\"\"\"\r\nFunctions in this file are always cal" +
                    "led from the TestBench directory.\r\n\"\"\"\r\nimport os\r\nimport json\r\nimport logging\r\n" +
                    "import subprocess\r\nimport py_modelica as pym\r\n# Throw this exception for \"expect" +
                    "ed\" errors.\r\nfrom driver_runner import TestBenchExecutionError\r\n\r\n# Reference to" +
                    " instantiated Modelica tool from py_modelica\r\nMODELICA_TOOL = None\r\n\r\n\r\ndef init" +
                    "ial_run():\r\n    \"\"\"\r\n    Instantiates a new tool for simulation,\r\n    compiles a" +
                    "nd makes one default simulation.\r\n    \"\"\"\r\n\r\n    log = logging.getLogger()\r\n    " +
                    "tb_dir = os.getcwd()\r\n    # Read the configuration file to get which Modelica to" +
                    "ol to use.\r\n    config_file = os.path.abspath(os.path.join(\'..\', \'test_bench_mod" +
                    "el_config.json\'))\r\n    with open(config_file, \'r\') as f_in:\r\n        tool_name =" +
                    " json.load(f_in)[\'tool_name\']\r\n    log.info(\'Loaded {0}, defined tool : {1}\'.for" +
                    "mat(config_file, tool_name))\r\n\r\n    os.chdir(\'CyPhy\')\r\n    # Read in the model_c" +
                    "onfig to be passed to the tool.\r\n    with open(\'model_config.json\', \'r\') as f_in" +
                    ":\r\n        model_config = json.load(f_in)\r\n    result_mat_file = model_config[\'r" +
                    "esult_file\']\r\n    del model_config[\'result_file\']\r\n\r\n    # Instantiate Modelica " +
                    "tool.\r\n    global MODELICA_TOOL\r\n    try:\r\n        if tool_name == \'OpenModelica" +
                    "\':\r\n            MODELICA_TOOL = pym.OpenModelica(model_config)\r\n            MODE" +
                    "LICA_TOOL.short_name = result_mat_file\r\n        elif tool_name == \'Dymola\':\r\n   " +
                    "         MODELICA_TOOL = pym.Dymola(model_config)\r\n            MODELICA_TOOL.res" +
                    "ult_mat = \'{0}.mat\'.format(result_mat_file)\r\n        elif tool_name == \'JModelic" +
                    "a\':\r\n            MODELICA_TOOL = pym.JModelica(model_config)\r\n    except pym.Mod" +
                    "elicaError as err:\r\n        raise TestBenchExecutionError(err.message)\r\n\r\n    # " +
                    "Compile the model.\r\n    try:\r\n        MODELICA_TOOL.compile_model()\r\n    except " +
                    "pym.ModelicaError as err:\r\n        raise TestBenchExecutionError(err.message)\r\n\r" +
                    "\n\r\n    # Read in parameters.\r\n    tb_parameters = pym.get_parameters_from_report" +
                    "_json(os.path.join(\'..\', \'testbench_manifest.json\'))\r\n    log.info(\'TestBench Pa" +
                    "rameters : {0}\'.format(tb_parameters))\r\n    if tb_parameters:\r\n        MODELICA_" +
                    "TOOL.change_parameter(tb_parameters)\r\n\r\n    os.chdir(tb_dir)\r\n    # Execute the " +
                    "model once.\r\n    execute()\r\n\r\n\r\ndef update_parameters(parameters):\r\n    \"\"\"\r\n   " +
                    " Uses the passed parameters rather than reading from the testbench_manifest.json" +
                    ". \r\n    The reason is that a PCC-driver might have special PCC-Properties.\r\n    " +
                    "\"\"\"\r\n    tb_dir = os.getcwd()\r\n    if parameters:\r\n        MODELICA_TOOL.change_" +
                    "parameter(parameters)\r\n    os.chdir(tb_dir)\r\n\r\n\r\ndef execute():\r\n    \"\"\"\r\n    Re" +
                    "ads in parameters from testbench_manifest.json and simulates the\r\n    test bench" +
                    ". When done, writes metrics to testbench_manifest.json.\r\n    \"\"\"\r\n    tb_dir = o" +
                    "s.getcwd()\r\n    log = logging.getLogger()\r\n    os.chdir(\'CyPhy\')\r\n    log.debug(" +
                    "\'Changed dir to {0}\'.format(os.getcwd()))\r\n\r\n    # Simulate model\r\n    try:\r\n   " +
                    "     MODELICA_TOOL.simulate_model()\r\n    except pym.ModelicaError as err:\r\n     " +
                    "   raise TestBenchExecutionError(err.message)\r\n\r\n    # Run PostProcessing script" +
                    "s\r\n    pp_failed = os.path.abspath(os.path.join(tb_dir, \'..\', \'_POST_PROCESSING_" +
                    "FAILED.txt\'))\r\n    if os.path.isfile(pp_failed):\r\n        log.info(\'Found {0} fr" +
                    "om previous run, deleting it...\'.format(pp_failed))\r\n        os.remove(pp_failed" +
                    ")\r\n    exception = None\r\n    try:\r\n        t_post = pym.run_post_scripts(MODELIC" +
                    "A_TOOL.result_mat, log)\r\n    except subprocess.CalledProcessError as err:\r\n     " +
                    "   exception = err\r\n    finally:\r\n        pp_output = \'\'\r\n        if exception:\r" +
                    "\n            pp_output = \'Post-script execution returned with error. : {0}\'.form" +
                    "at(exception.returncode)\r\n        if os.path.isfile(pp_failed):\r\n            wit" +
                    "h open(pp_failed, \'r\') as f_in:\r\n                pp_output = \'{0}\\n POST_PROCESS" +
                    "ING_FAILED :\\n {1}\'.format(pp_output, f_in.read())\r\n        if pp_output:\r\n     " +
                    "       raise TestBenchExecutionError(pp_output)\r\n    ## TODO: What are the rules" +
                    " of limit checks?\r\n    os.chdir(tb_dir)\r\n    return None");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class ModelicaBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
