<#@ template language="C#" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\..\trunk\externals\common-scripts\ISIS.GME.Common.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\..\trunk\generated\CyPhyML\models\ISIS.GME.Dsml.CyPhyML.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="ISIS.GME.Dsml.CyPhyML.Classes" #> 
<#@ output extension=".py" #>
# ===========================================================================
# Auto generated from FEA.tt
# ===========================================================================
"""
Functions in this file are always called from the TestBench directory. They must
return from that directory (if there is an exception it does not matter).
"""
import os
import subprocess
import logging
import time
import xml.etree.ElementTree as ET
# Throw this exeception for "expected" errors.
from driver_runner import TestBenchExecutionError

## This is the mapping of parameter names in the test-bench and the Name in CADAssembly.xml
param_map = {'ForceLoad': 'x'}

## Maximum time in seconds to wait for each execution.
MAX_WAIT_TIME = 3600


def initial_run():
    """
    Setup whatever needs to be setup once. Then execute a run once using the default parameters
    in testbench_manifest.json. (These and their metrics will be saved and used in the final
    testbench_manifest.json.
    """
    log = logging.getLogger()
    log.info('Running initial run, calling exectute.')
    execute()


def update_parameters(parameters):
    """
    Update parameters for the run. (The parameters are already updated in testbench_manifest.json.)
    :type parameters: dict
    :param parameters: keys are name of Parameter and value is float.
    """
    log = logging.getLogger()
    log.info('About to update parameters in CADAssembly.xml.')
    et = ET.parse('CADAssembly.xml')
    for kvp in parameters.iteritems():
        if kvp[0] not in param_map:
            log.warning('Parameter {} does not have a mapping to CADAssembly.xml', kvp[0])
        else:
            parameter_name = param_map[kvp[0]]
            parameter_value = kvp[1]
            log.info('Parameter mapping found {} :-> {}'.format(kvp[0], parameter_name))
            cnt = _update_parameter(et, parameter_name, parameter_value)
            log.info('Updated {} CADParameter(s) {} = {}'.format(cnt, parameter_name, parameter_value))

    et.write('CADAssembly.xml')
    log.info('Wrote back to CADAssembly.xml')


def execute():
    """
    Execute the test-bench. A call to this function should update the metrics in the testbench_manifest.json.
    :rtype: dict or None
    :return: Dictionary with metrics names and values if testbench_manifest.json is not updated, else None.
    """
    log = logging.getLogger()
    cad_bat = 'runCADJob.bat'
    out_put_file = 'PET_run.txt'

    if os.path.isfile(out_put_file):
        os.remove(out_put_file)

    log.info('About to call :: {}'.format(os.path.abspath(cad_bat)))
    was_killed = False
    with open(out_put_file, 'w') as f_out:
        timer = 0
        sim_process = subprocess.Popen(cad_bat, stdout=f_out, stderr=f_out)
        while sim_process.poll() is None:
            time.sleep(0.1)
            timer += 0.1
        if timer > MAX_WAIT_TIME:
            sim_process.kill()
            f_out.write('runCADJob.bat exceeded MAX_WAIT_TIME = {0} (seconds).'.format(MAX_WAIT_TIME))
            was_killed = True

    with open(out_put_file, 'r') as f_in:
        out_put = ''.join(f_in.readlines())
    if was_killed:
        raise TestBenchExecutionError(out_put)
    else:
        log.debug(out_put)
        log.info('Successful {} run!'.format(cad_bat))
    return None

def _update_parameter(et, name, value):
    """
    This needs to be more generic.
    """
    root = et.getroot()
    cnt = 0
    for p_elem in (elem for elem in root.iter(tag='Force')):
        p_elem.attrib[name] = str(value)
        cnt += 1

    return cnt