// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhyPET.Templates
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using ISIS.GME.Dsml.CyPhyML.Classes;
    
    
    #line 1 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class Modelica_v2 : Modelica_v2Base
    {
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write(" \r\n");
            this.Write(@"# ===========================================================================
# Auto generated from Modelica.tt
# ===========================================================================
# OpenMDAO Component
#   Type: Modelica
import sys
import json
import os
sys.path.insert(0, os.path.join(os.getcwd(), 'TestBench', 'scripts'))
from simulate import init_and_compile_test_bench, execute_test_bench
from openmdao.main.api import Component
from openmdao.lib.datatypes.api import Float
import py_modelica.report_functions as pym_report

import logging
import shutil
import numpy as np

class TestBench(Component):
    """""" Documentation comment for this Assembly. """"""
    ## set up interface to the framework
    tool = None                          # simulation tool class, Dymola or OpenModelica
    root_dir = ''                        # root_directory
    tb_dir = ''                          # test bench directory
    rp_file = ''                         # testbench_manifest.json in tb-dir
    def_parameters = {}                  # parameters after default simulation
    def_metrics = {}                     # metrics after default simulation
    tool_stat = {}
    initialized = False

    # input (parameters) definitions
");
            
            #line 48 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
    foreach (var item in this.Parameters)
        {
            string value = item.Attributes.Value == "" ? "0.0" : item.Attributes.Value;
            //string unit = item.Referred.ParamPropTarget != null ? ", units='" + item.Referred.ParamPropTarget.Name + "'" : "";
			string unit = "";
            
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 54 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = Float(");
            
            #line 54 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(value));
            
            #line default
            #line hidden
            this.Write(", iotype=\'in\', desc=\'");
            
            #line 54 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\'");
            
            #line 54 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 55 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n    # Inputs properties defined inside components\r\n");
            
            #line 58 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
 foreach (var kvp in this.PCCPropertyInputs)
       {//TODO : is value = 0.0 ok? Or must the mean be extracted?
   
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 61 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));
            
            #line default
            #line hidden
            this.Write(" = Float(0.0, iotype=\'in\', desc=\'");
            
            #line 61 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value));
            
            #line default
            #line hidden
            this.Write("\')\r\n");
            
            #line 62 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n    # output (parameters) definitions\r\n");
            
            #line 65 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
     foreach (var item in this.Metrics)
        { 
            string value = item.Attributes.Value == "" ? "0.0" : item.Attributes.Value;
            //string unit = item.Referred.ParamPropTarget != null ? ", units='" + item.Referred.ParamPropTarget.Name + "'" : "";
			string unit = "";
            
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 71 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = Float(");
            
            #line 71 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(value));
            
            #line default
            #line hidden
            this.Write(", iotype=\'out\', desc=\'");
            
            #line 71 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\'");
            
            #line 71 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 72 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
        } 
            
            #line default
            #line hidden
            this.Write("\r\n    def __init__(self):\r\n        super(TestBench, self).__init__()\r\n        sel" +
                    "f._logger.level = logging.DEBUG\r\n\r\n    def initialize(self):\r\n        self._logg" +
                    "er.info(\'Initializing model...\')\r\n        with open(\'");
            
            #line 80 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DynamicConfigFile));
            
            #line default
            #line hidden
            this.Write("\', \'r\') as f_in:\r\n            tool_name = json.load(f_in)[\'tool_name\']\r\n        s" +
                    "elf.root_dir = os.getcwd()\r\n        self.tb_dir = os.path.join(self.root_dir,\'Te" +
                    "stBench\', \'CyPhy\')\r\n        os.chdir(self.tb_dir)\r\n        self.rp_file = os.pat" +
                    "h.abspath(os.path.join(self.tb_dir, \'..\', \'testbench_manifest.json\'))\r\n        s" +
                    "hutil.copy(self.rp_file, os.path.join(self.root_dir, \'testbench_manifest.json\'))" +
                    "\r\n        # Run the simulation once\r\n        self.tool = init_and_compile_test_b" +
                    "ench(tool_name)\r\n        t_mat, t_post = execute_test_bench(self.tool, self.rp_f" +
                    "ile)\r\n        shutil.copy(self.rp_file, os.path.join(self.root_dir, \'testbench_m" +
                    "anifest.json\'))\r\n        self.def_metrics, self.def_parameters = pym_report.copy" +
                    "_metrics_and_parameters(self.rp_file)\r\n        self.initialized = True\r\n        " +
                    "os.chdir(self.root_dir)\r\n        # Statistics\r\n        self.tool_stat[\"tool_name" +
                    "\"] = self.tool.tool_name\r\n        self.tool_stat[\"version\"] = self.tool.tool_ver" +
                    "sion   \r\n        self.tool_stat[\"version_number\"] = self.tool.tool_version_nbr\r\n" +
                    "        exec_times = {}\r\n        exec_times[\"compilation_time\"] = self.tool.comp" +
                    "ilation_time\r\n        exec_times[\"translation_time\"] = self.tool.translation_tim" +
                    "e\r\n        exec_times[\"make_time\"] = self.tool.make_time\r\n        exec_times[\"si" +
                    "mulation_time\"] = self.tool.simulation_time\r\n        exec_times[\"total_time\"] = " +
                    "self.tool.total_time\r\n        exec_times[\"load_mat_time\"] = t_mat\r\n        exec_" +
                    "times[\"post_scripts_time\"] = t_post\r\n        self.tool_stat[\"exec_times\"] = exec" +
                    "_times\r\n        pcc_times = {}\r\n        pcc_times[\"simulation_times\"] = []\r\n    " +
                    "    pcc_times[\"load_mat_times\"] = []\r\n        pcc_times[\"post_script_times\"] = [" +
                    "]\r\n        self.tool_stat[\"PCC_times\"] = pcc_times\r\n\r\n    def execute(self):\r\n  " +
                    "      if not self.initialized:\r\n            self.initialize()\r\n        self._log" +
                    "ger.info(\" --- ==== **** New Iteration Started **** ==== ---\")\r\n        self._lo" +
                    "gger.info(\'  ---------- >>> ======= Parameters ======= <<< ----------  \')\r\n\r\n   " +
                    "     # Update testbench_manifest.json[\'Parameters\']\r\n        params = {\r\n");
            
            #line 121 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
     foreach (var item in this.Parameters)
        { 
            
            #line default
            #line hidden
            this.Write("            \'");
            
            #line 123 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\': self.");
            
            #line 123 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 124 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
        } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        os.chdir(self.tb_dir)\r\n        pym_report.update_parameters_in" +
                    "_report_json(params, self.rp_file)\r\n\r\n");
            
            #line 129 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
 if (this.PCCPropertyInputs.Any()){ 
            
            #line default
            #line hidden
            this.Write("        # Update inputs properties defined inside components\r\n        properties " +
                    "= {\r\n");
            
            #line 132 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
 foreach (var kvp in this.PCCPropertyInputs)
       {
            
            #line default
            #line hidden
            this.Write("           \'");
            
            #line 134 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value));
            
            #line default
            #line hidden
            this.Write("\': self.");
            
            #line 134 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 135 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
}
            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 137 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
 foreach (var kvp in this.PCCPropertyInputs)
       {
            
            #line default
            #line hidden
            this.Write("        self._logger.info(\'{0} : {1}\'.format(\'");
            
            #line 139 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value));
            
            #line default
            #line hidden
            this.Write("\', self.");
            
            #line 139 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));
            
            #line default
            #line hidden
            this.Write("))\r\n");
            
            #line 140 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
}
            
            #line default
            #line hidden
            this.Write("        self.tool.change_parameter(properties)\r\n");
            
            #line 142 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"        # Run simulation, will update report_file['Metrics']
        t_mat, t_post = execute_test_bench(self.tool, self.rp_file)
        self.tool_stat[""PCC_times""][""simulation_times""].append(self.tool.simulation_time)
        self.tool_stat[""PCC_times""][""load_mat_times""].append(t_mat)
        self.tool_stat[""PCC_times""][""post_script_times""].append(t_post)
        # Read result from testbench_manifest.json['Metrics'] and update metrics
        metrics = pym_report.get_metrics_from_report_json(report_file=self.rp_file)
        # Move over default values (temporary solution)
        pym_report.update_metrics_and_parameters(self.def_metrics, self.def_parameters, self.rp_file)
        os.chdir(self.root_dir)
        with open('tool_stat.json', 'wb') as json_out:
            json.dump(self.tool_stat, json_out)
");
            
            #line 155 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
	    foreach (var item in this.Metrics)
		{ 
            
            #line default
            #line hidden
            this.Write("        self.");
            
            #line 157 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = float(metrics[\'");
            
            #line 157 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\'])\r\n");
            
            #line 158 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
      } 
            
            #line default
            #line hidden
            this.Write("        \r\n        # print out the metrics\r\n        print \'  ---------- <<< ======" +
                    "= Metrics ======= >>> ----------  \'\r\n");
            
            #line 162 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
	    foreach (var item in this.Metrics)
        { 
            
            #line default
            #line hidden
            this.Write("        print \'{0:20} : {1}\'.format(\'");
            
            #line 164 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\', self.");
            
            #line 164 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 165 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"
        } 
            
            #line default
            #line hidden
            this.Write("        print \'\\n\'\r\n        self._logger.info(\'Metrics : {0}\'.format(str(metrics)" +
                    "))\r\n        self._logger.info(\'Execution ended.\')\r\n    # End execute\r\n# End Test" +
                    "Bench class\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 172 "C:\META\meta_trunk\src\CyPhyPET\Templates\Modelica_v2.tt"

	public List<ISIS.GME.Dsml.CyPhyML.Interfaces.Parameter> Parameters {get;set;}
	public List<ISIS.GME.Dsml.CyPhyML.Interfaces.Metric> Metrics {get;set;}
	public string DynamicConfigFile { get; set;}
	public Dictionary<string, string> PCCPropertyInputs = new Dictionary<string,string>();

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class Modelica_v2Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
