//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1022
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CyPhyPET.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CyPhyPET.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Bitmap beta {
            get {
                object obj = ResourceManager.GetObject("beta", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import os
        ///import sys
        ///import json
        ///import time
        ///import logging
        ///
        ///ROOT_DIR = os.getcwd()  # make sure to change back to this when exiting
        ///
        ///# sys.exit is broken under the Windows virtualenv
        ///#  uncaught exceptions are broken too (i.e. %ERRORLEVEL% == 0)
        ///#  it seems like the import of py_modelica causes this issue
        ///if os.name == &apos;nt&apos;:
        ///    import win32api
        ///    def _exit(code):
        ///        win32api.TerminateProcess(win32api.GetCurrentProcess(), code)
        ///    sys.exit = _exit
        ///
        ///try:
        ///    import py_modelica as py [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string driver_runner {
            get {
                return ResourceManager.GetString("driver_runner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import os
        ///import sys
        ///import json
        ///import time
        ///import logging
        ///
        ///ROOT_DIR = os.getcwd()  # make sure to change back to this when exiting
        ///
        ///# sys.exit is broken under the Windows virtualenv
        ///#  uncaught exceptions are broken too (i.e. %ERRORLEVEL% == 0)
        ///#  it seems like the import of py_modelica causes this issue
        ///if os.name == &apos;nt&apos;:
        ///    import win32api
        ///    def _exit(code):
        ///        win32api.TerminateProcess(win32api.GetCurrentProcess(), code)
        ///    sys.exit = _exit
        ///
        ///try:
        ///    import py_modelica as py [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string driver_runner_cad {
            get {
                return ResourceManager.GetString("driver_runner_cad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import os
        ///import sys
        ///import time
        ///import logging
        ///
        ///try:
        ///    import py_modelica as pym
        ///    print &apos;Found py_modelica in virtual python environment&apos;
        ///except ImportError as err:
        ///    print err.message
        ///    print &apos;Use META virtual python environment&apos;
        ///
        ///from optparse import OptionParser
        ///
        ///parser = OptionParser()
        ///parser.add_option(&quot;-d&quot;, &quot;--driver&quot;, dest=&quot;driver&quot;,
        ///                  help=&quot;Name of the driver to be executed&quot;)
        ///
        ///if __name__==&apos;__main__&apos;:
        ///    if not os.path.isdir(&apos;log&apos;):
        ///        os.mkdir(&apos;log [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string driver_runner_simpleCalc {
            get {
                return ResourceManager.GetString("driver_runner_simpleCalc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
        ///&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///  &lt;head&gt;
        ///    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;
        ///    &lt;title&gt;
        ///      MDAO sample
        ///    &lt;/title&gt;
        ///    &lt;style type=&quot;text/css&quot;&gt;
        ///        #console_log {
        ///            border: 1px solid #999;
        ///            border-radius: 5px;
        ///            background: #EEE;
        ///            padding: 10px;
        ///            margin: 5px;
        ///            border-image: initia [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string index {
            get {
                return ResourceManager.GetString("index", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap lognormal {
            get {
                object obj = ResourceManager.GetObject("lognormal", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap normal {
            get {
                object obj = ResourceManager.GetObject("normal", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///import io
        ///import json
        ///import csv
        ///
        ///class save_results():
        ///
        ///    jsonDict = dict({&apos;inputNames&apos;: &apos;&apos;})
        ///    jsonDict.update({&apos;inputNames&apos;: list()})
        ///    jsonDict[&apos;outputNames&apos;] = []
        ///    jsonDict[&apos;result&apos;] = []
        ///    
        ///    Assembly = None
        ///    
        ///    def __init__(self, assembly, results):
        ///        self.Assembly = assembly
        ///        # Get name
        ///        self.jsonDict[&apos;name&apos;] = assembly.name
        ///        
        ///        # Get type
        ///        self.jsonDict[&apos;type&apos;] = &apos;TODO TODO TODO&apos; #assembly.driver.type
        ///        
        ///         [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string save_results {
            get {
                return ResourceManager.GetString("save_results", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap uniform {
            get {
                object obj = ResourceManager.GetObject("uniform", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #!/usr/bin/python
        ///import zipfile
        ///import os
        ///import sys
        ///import os.path
        ///
        ///path_join = os.path.join
        ///if sys.platform == &apos;win32&apos;:
        ///    def path_join(*args):
        ///        return &apos;\\\\?\\&apos; + os.path.join(os.getcwd(), os.path.join(*args))
        ///
        ///output_filename = &apos;source_data.zip&apos;
        ///
        ///if os.path.exists(output_filename):
        ///    os.remove(output_filename)
        ///
        ///with zipfile.ZipFile(output_filename, &apos;w&apos;, allowZip64=True) as z:
        ///    parent_dir_name = os.path.basename(os.getcwd())
        ///    os.chdir(&apos;..\\&apos;)
        ///    for dirpath,dirs,files in os.walk(parent [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string zip {
            get {
                return ResourceManager.GetString("zip", resourceCulture);
            }
        }
    }
}
