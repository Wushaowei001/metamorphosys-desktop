//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CyPhySoT.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CyPhySoT.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import time
        ///import subprocess
        ///import sys
        ///import os
        ///import _winreg as wr
        ///
        ///def _query_registry():
        ///    &quot;&quot;&quot;
        ///    Queries the Windows registry for META_PATH in order to get the location of
        ///    python virtual environment containing all necessary packages and modules. 
        ///    &quot;&quot;&quot;
        ///
        ///    try:
        ///        # try to obtain META_PATH from the registry
        ///        key = wr.OpenKey(wr.HKEY_LOCAL_MACHINE, r&apos;software\meta&apos;, 0, wr.KEY_READ)
        ///        meta_path = wr.QueryValueEx(key, &apos;META_PATH&apos;)[0]
        ///        py_path = os.path [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string run_sot {
            get {
                return ResourceManager.GetString("run_sot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to from version_check import check_version
        ///
        ///if check_version():
        ///    print(&apos;Version test passed calling real script which is compatible with a couple of versions only.&apos;)
        ///    import run_sot
        ///    import sys
        ///    sys.exit(run_sot.main())
        ///else:
        ///    import sys
        ///    sys.exit(5)
        ///.
        /// </summary>
        internal static string run_sot_check {
            get {
                return ResourceManager.GetString("run_sot_check", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import sys
        ///import win32com
        ///import json
        ///import os
        ///
        ///manifest_filename = &apos;manifest.sot.json&apos;
        ///
        ///def run_sot(sot):
        ///    &apos;&apos;&apos;Sot has a project name and a id for the SoT object in the project&apos;&apos;&apos;
        ///    print sot
        ///    
        ///    
        ///    return 0
        ///    
        ///def main():
        ///    # TODO: change current working  directory to __file__&apos;s directory
        ///    # restore the working dir before return
        ///    
        ///    print &apos;Running sot... &apos;
        ///    
        ///    if not os.path.exists(manifest_filename):
        ///        print &apos;Sot manifest file does not exist.&apos;
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sot {
            get {
                return ResourceManager.GetString("sot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #!/bin/python
        ///def check_version(min_version=(2,7,3), 
        ///                  max_version=(2,7,4),
        ///                  architecture=&apos;32bit&apos;,
        ///                  msg_requirement=&apos;Please use Python 2.7.3 win32&apos;):
        ///    &quot;&quot;&quot;
        ///    Parameter architecture takes values &apos;32bit&apos;, &apos;64bit&apos; or &apos;&apos; if check is not required. 
        ///    
        ///    If we only accept one version (a,b,c) -&gt; min_version = (a,b,c) and max_version (a,b,c+1), 
        ///    e.g., to specify 2.7.2 then set min_version=(2,7,2) and max_version=(2,7,3)
        ///    
        ///    &quot;&quot;&quot;
        ///    is_v [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string version_check {
            get {
                return ResourceManager.GetString("version_check", resourceCulture);
            }
        }
    }
}
